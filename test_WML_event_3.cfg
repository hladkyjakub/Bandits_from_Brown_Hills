#This is for testing WML purpose (MEGA usefull)
#alias e3=lua wesnoth.require("wml-utils").handle_event_commands(wml.tovconfig(wml.load("~add-ons/Bandits_from_Brown_Hills/test_WML_event_3.cfg")))
#  [store_unit]
#      [filter]
#          type=Orcish Archer
#      [/filter]
#  [/store_unit]
#  [foreach]
#      array=unit.attack
#      [do]
#          [if]
#              [variable]
#                  name=unit.attack[$i].name
#                  equals=$unit.attack[1].name
#              [/variable]
#              [then]
#                  [message]
#                      speaker=narrator
#                      message="The condition is true!"
#                  [/message]
#                  [message]
#                      speaker=narrator
#                      message="$unit.attack[$i].name"
#                  [/message]
#                  [message]
#                      speaker=narrator
#                      message="$unit.attack[1].name"
#                  [/message]
#              [/then]
#          [/if]
#      [/do]
#  [/foreach]

    [store_unit]
        [filter]
            x,y=8,19
        [/filter]
        variable=unit
    [/store_unit]
    [store_unit]
        [filter]
            x,y=9,19
        [/filter]
        variable=second_unit
    [/store_unit]
[lua]
    code = <<
    BfBH={}
BfBH.filter={}
BfBH.table={}
BfBH.combat={}
    BfBH.table.std_print=function(t, indent)
        indent = indent or 0
        local indentation = string.rep("  ", indent)
        if type(t) ~= "table" then
            std_print(indentation .. tostring(t))
            return
        end
        std_print(indentation .. "{")
        for key, value in pairs(t) do
            local formattedKey
            if type(key) == "number" then
                formattedKey = "[" .. key .. "]"
            else
                formattedKey = tostring(key)
            end    
            if type(value) == "table" then
                std_print(indentation .. "  " .. formattedKey .. " =")
                BfBH.table.std_print(value, indent + 1)
            else
                std_print(indentation .. "  " .. formattedKey .. " = " .. tostring(value))
            end
        end
        std_print(indentation .. "}")
    end
-- local unit_types = {'BfBH Footpad', 'BfBH Thug', 'BfBH Poacher'}
-- local unit_type = unit_types[1]
-- while wesnoth.unit_types[unit_type].advances_to[1] do
--     BfBH.table.std_print(wesnoth.unit_types[unit_type].advances_to[1])
--     unit_type = wesnoth.unit_types[unit_type].advances_to[1]
-- end
local base_units = {"BfBH Footpad", "BfBH Thug", "BfBH Poacher", "BfBH Goblin Spearman", "BfBH Spearman"}
local move_down = {}
wesnoth.wml_actions.store_unit_type_ids({variable="unit_type_ids"})
std_print(wml.variables["unit_type_ids"])
for item in string.gmatch(wml.variables["unit_type_ids"], "([^,]+)") do
    for i = 1, #wesnoth.unit_types[item].advances_to do
        move_down[wesnoth.unit_types[item].advances_to[i]] = move_down[wesnoth.unit_types[item].advances_to[i]] or {}
        table.insert(move_down[wesnoth.unit_types[item].advances_to[i]], item)
    end
end
function get_base_units_bfs(start_unit_type, base_units)
    local queue = {start_unit_type}
    local visited = {[start_unit_type] = true}
    local found_base_units = {}
    local base_units_set = {}
    for _, unit in ipairs(base_units) do
        base_units_set[unit] = true
    end
    while #queue > 0 do
        local current_type = table.remove(queue, 1)
        if base_units_set[current_type] then
            table.insert(found_base_units, current_type)
        end
        local lower_units = move_down[current_type] or {}
        for _, unit_type in ipairs(lower_units) do
            if not visited[unit_type] then
                visited[unit_type] = true
                table.insert(queue, unit_type)
            end
        end
    end
    if #found_base_units == 0 then
        local queue = {start_unit_type}
        local visited = {[start_unit_type] = true}
        while #queue > 0 do
            local current_type = table.remove(queue, 1)
            if base_units_set[current_type] then
                table.insert(found_base_units, current_type)
            end
            local lower_units = wesnoth.unit_types[current_type].advances_to or {}
            for _, unit_type in ipairs(lower_units) do
                if not visited[unit_type] then
                    visited[unit_type] = true
                    table.insert(queue, unit_type)
                end
            end
        end
    end
    return found_base_units
end
-- Test examples
BfBH.table.std_print(move_down["Ogre"])
BfBH.table.std_print(move_down["Bowman"])
BfBH.table.std_print(get_base_units_bfs("BfBH Fugitive", base_units))
BfBH.table.std_print(get_base_units_bfs("BfBH Peasant", base_units))
BfBH.table.std_print(get_base_units_bfs("BfBH Footpad", base_units))
BfBH.table.std_print(get_base_units_bfs("BfBH Huntsman", base_units))
BfBH.table.std_print(get_base_units_bfs("BfBH Ranger", base_units))
    >>
[/lua]










#  [lua]
#      [args]
#          {WEAPON_SPECIAL_BLEED}
#          {ABILITY_ADAPTIVE_ARMOR}
#          {WEAPON_SPECIAL_BULLSEYE}
#          {WEAPON_SPECIAL_TEMPO_SURGE}
#          {WEAPON_SPECIAL_KNOCKBACK}
#          #...
#      [args]
#      code=<<
#  local effects = {}
#  local ecx = wesnoth.current.event_context
#  local unit = wesnoth.units.get(ecx.x1, ecx.y1)
#  unit:add_modification("object", effects)
#      >>
#  [/lua]





#  [event]
#      name=attack
#      first_time_only=yes
#      [store_unit]
#          [filter]
#              x,y=$x1,$y1
#          [/filter]
#          variable=unit
#      [/store_unit]
#      [store_unit]
#          [filter]
#              x,y=$x2,$y2
#          [/filter]
#          variable=second_unit
#      [/store_unit]
#  [lua]
#      code=<<
#      function printTable(t, indent)
#          indent = indent or 0
#          local indentation = string.rep("  ", indent)
    
#          if type(t) ~= "table" then
#              std_print(indentation .. tostring(t))
#              return
#          end
    
#          print(indentation .. "{")
#          for key, value in pairs(t) do
#              local formattedKey
#              if type(key) == "number" then
#                  formattedKey = "[" .. key .. "]"
#              else
#                  formattedKey = tostring(key)
#              end
            
#              if type(value) == "table" then
#                  std_print(indentation .. "  " .. formattedKey .. " =")
#                  printTable(value, indent + 1)
#              else
#                  std_print(indentation .. "  " .. formattedKey .. " = " .. tostring(value))
#              end
#          end
#          std_print(indentation .. "}")
#      end

#  local function choose_defender_weapon(attacker, defender, attacker_weapon)
#      local i = 0
#      while wml.variables[""..defender.."[0].attack["..i.."]"] ~= nil do
#          if wml.variables[""..defender.."[0].attack["..i.."].range"] == wml.variables[""..attacker.."[0].attack["..attacker_weapon.."].range"] then
#              local a1, b1, c1, d1 =wesnoth.simulate_combat(wesnoth.units.get(wml.variables[""..attacker.."[0].id"]),(attacker_weapon + 1), wesnoth.units.get(wml.variables[""..defender.."[0].id"]))
#              local a2, b2, c2, d2 =wesnoth.simulate_combat(wesnoth.units.get(wml.variables[""..attacker.."[0].id"]),(attacker_weapon + 1), wesnoth.units.get(wml.variables[""..defender.."[0].id"]), (i + 1))
#              if BfBH.table.deep_compare(a1,a2) and BfBH.table.deep_compare(b1,b2) and BfBH.table.deep_compare(c1,c2) and BfBH.table.deep_compare(d1,d2) then
#                  return i
#              end
#          end
#          i = i + 1
#      end
#      return false
#  end
#  std_print(choose_defender_weapon("unit", "second_unit", 1))



#  >>
#  [/lua]
    #  [if]
    #      [variable]
    #          name=turn_number
    #          formula="turn_number > 10 and turn_number % 2 = 0"
    #      [/variable]
    #      [then]
    #          [set_variable]
    #              name=gold_bonus
    #              formula="turn_number * 5"
    #          [/set_variable]
    #          [gold]
    #              side=1
    #              amount=$gold_bonus
    #          [/gold]
    #          [message]
    #              speaker=narrator
    #              message="You received a bonus of $gold_bonus gold!"
    #          [/message]
    #      [/then]
    #      [else]
    #          [message]
    #              speaker=narrator
    #              message="No bonus this turn."
    #          [/message]
    #      [/else]
    #  [/if]
#  [/event]