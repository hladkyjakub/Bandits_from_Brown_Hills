#alias e5=lua wesnoth.require("wml-utils").handle_event_commands(wml.tovconfig(wml.load("~add-ons/Bandits_from_Brown_Hills/test_WML_event_5.cfg")))
[lua]
code=<<
std_print("Meow")
>>
[/lua]
[event] #TODO probably set fire no attac_events and no attack end events
    name=attack
    first_time_only=no
    [filter_attack]
        special_id=lure
    [/filter_attack]
    [filter_condition]
        [variable]
            name = lured_enemy
            not_equals = yes
        [/variable]
    [/filter_condition]
    [lua]
        code=<<
wml.variables["lured_enemy"] = true
local x1 = wesnoth.current.event_context.x1
local y1 = wesnoth.current.event_context.y1
local x2 = wesnoth.current.event_context.x2
local y2 = wesnoth.current.event_context.y2
local u = wesnoth.units.get(x1,y1)
local u2 = wesnoth.units.get(x2,y2)
local u_cfg = u.__cfg
local u2_cfg = u2.__cfg
local loc = u.loc
local loc2 = u2.loc
local animator = wesnoth.units.create_animator()

if u.valid == 'map' and u.id == u_cfg.id and BfBH.table.deep_compare(u.loc, loc) then
    wesnoth.game_events.fire("exit_hex", loc, loc2)
end
if u2.valid == 'map' and u2.id == u2_cfg.id and BfBH.table.deep_compare(u2.loc, loc2) then
    wesnoth.game_events.fire("exit_hex", loc2, loc)
end


animator:add(u, "pre_movement", "hit",{with_bars = false})
animator:add(u2, "pre_movement", "hit",{with_bars = false})
animator:run()
animator:clear()


animator:add(u, "movement", "hit",{with_bars = false})
animator:add(u2, "movement", "hit",{with_bars = false})
animator:run()
animator:clear()


--TODO animate the move
local put_back = false
if u.valid == 'map' and u.id == u_cfg.id and BfBH.table.deep_compare(u.loc, loc) and (wesnoth.units.get(loc) ~= nil or wesnoth.current.map:on_border(loc)) then --TODO the hell is the last part of the condition?
    u:extract()
    put_back = true
end
if u2.valid == 'map' and u2.id == u2_cfg.id and BfBH.table.deep_compare(u2.loc, loc2) and (wesnoth.units.get(loc2) ~= nil or wesnoth.current.map:on_border(loc2)) then
    u2.loc = loc
end
if put_back == true then
    u.loc = loc2
    u:to_map()
end


wesnoth.wml_actions.redraw({clear_shroud=true})

animator:add(u, "post_movement", "hit",{with_bars = false})
animator:add(u2, "post_movement", "hit",{with_bars = false})
animator:run()
animator:clear()


if u.valid == 'map' and u.id == u_cfg.id and BfBH.table.deep_compare(u.loc, loc2) then
    wesnoth.game_events.fire("enter_hex", loc2, loc)
end
if u2.valid == 'map' and u2.id == u2_cfg.id and BfBH.table.deep_compare(u2.loc, loc) then
    wesnoth.game_events.fire("enter_hex", loc, loc2)
end


wesnoth.wml_actions.redraw({clear_shroud=true})




if u.valid == 'map' and u.id == u_cfg.id and BfBH.table.deep_compare(u.loc, loc2) then
    if wesnoth.terrain_types[wesnoth.current.map[loc2]].village then
        wesnoth.map.set_owner(loc2,u.side)
        wesnoth.game_events.fire("capture", loc2)
    end
end
if u2.valid == 'map' and u2.id == u2_cfg.id and BfBH.table.deep_compare(u2.loc, loc) then
    if wesnoth.terrain_types[wesnoth.current.map[loc]].village then
        wesnoth.map.set_owner(loc,u2.side)
        wesnoth.game_events.fire("capture", loc)
    end
end



if u.valid == 'map' and u.id == u_cfg.id and BfBH.table.deep_compare(u.loc, loc2) then
    wesnoth.game_events.fire("moveto", loc2, loc)
end
if u2.valid == 'map' and u2.id == u2_cfg.id and BfBH.table.deep_compare(u2.loc, loc) then
    wesnoth.game_events.fire("moveto", loc, loc2)
end


local w = wml.get_child(wesnoth.current.event_context,"weapon")
local w2 = wml.get_child(wesnoth.current.event_context,"second_weapon")
local wi = get_weapon_index(u,w.name)
local w2i = get_weapon_index(u2,w2.name)

u.attacks_left = u.attacks_left + w.attacks_used

wesnoth.wml_actions.do_command({
    {"attack",{
        weapon = wi - 1,
        defender_weapon = w2i - 1,
        {"source", {x = u.x, y = u.y}},
        {"destination", {x = u2.x, y = u2.y}}
    }}
})
>>
    [/lua]
[/event]
[event]
    name = attack_end
    first_time_only = no
    [lua]
        code=<<
wml.variables["lured_enemy"] = false
>>
    [/lua]
[/event]
[event]
    name = exit_hex
    first_time_only = no
    [lua]
        code=<<
std_print("EXIT HEX!")
>>
    [/lua]
[/event]