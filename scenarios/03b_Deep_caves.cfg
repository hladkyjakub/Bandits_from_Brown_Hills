#textdomain wesnoth-Bandits_from_Brown_Hills
[scenario]
    name= _ <<The text contains invalid Pango markup: "<span size='70000' font_family='Oldania ADF Std' color='#baac7d'>{TITLE}</span>">>
    id=03b_Deep_caves
    map_file="03_Deep_caves.map"
    next_scenario=null
    #04 idk???
    turns= -1
    experience_modifier=100
    {DEFAULT_MUSIC_PLAYLIST}
    {IMPLEMENT_AMLA_CUSTOM}
    victory_when_enemies_defeated=no
    [side]
        side=1
        facing=se
        controller=human
        color=green
        team_name=bandits
        side_name=_"Bandits"
        user_team_name= _ "Bandits"
        recruit=Thug, Footpad, Poacher
        {FLAG_VARIANT6 ragged}
        persistent=yes
        save_id=bandits
        gold=0
        shroud=yes
        defeat_condition=never
        #bandits(player)
    [/side]
    [side]
        side=2
        controller=ai
        color=red
        team_name=enemy
        side_name=_"Humans"
        user_team_name= _ "Humans"
        recruit=Horseman, Cavalryman
        {FLAG_VARIANT loyalist}
        gold=999999
        #humans
    [/side]
    [event]
        name=prestart
        first_time_only=no
        [lua] #LOADING
            code=<<
for key, value in pairs(wml.all_variables) do wml.variables[key] = nil end
for index, elem in ipairs(wml.all_variables) do wml.variables[""..elem[1].."[0]"] = nil end
wesnoth.wml_actions.capture_village({})
wesnoth.wml_actions.get_global_variable(
{
namespace="Bandits_from_Brown_Hills",
to_local="save_data",
from_global="save_file",
side=1,
}
)
for key, value in pairs(wml.variables["save_data"]) do
    if type(value) ~= "table" then
        wml.variables[key] = value
    end
end
for index, elem in ipairs(wml.variables["save_data"]) do
    if elem[1] ~= "save_data" then
        local i = 0
        while wml.variables[""..elem[1].."["..i.."]"] ~= nil do
            i = i + 1
        end
        wml.variables[""..elem[1].."["..i.."]"] = elem[2]
    end
end
wesnoth.wml_actions.kill({})

for key, value in ipairs(wml.array_variables.units_to_store) do
std_print(value.x)
-- for topkey, topvalue in pairs(value) do
--     std_print(topkey .. ": " .. tostring(topvalue))
--     if type(topvalue) == "table" then
--         for subKey, subValue in pairs(topvalue) do
--             std_print("    " .. subKey .. ": " .. tostring(subValue))
--         end
--     end
-- end
    if value.x and value.y and value.type then
        wesnoth.units.to_map(value)
    end
end
wml.variables["units_to_store"] = nil
wesnoth.scenario.turns = wml.variables["turn_limit"]


-- side = wesnoth.sides.get(1)
-- wesnoth.sides[1].gold= wml.variables["stored_side"].gold

-- for key, value in pairs(wml.variables["stored_side"]) do
--     if type(value) ~= "table" and key ~= "allow_player" then
--         print(key,value)
--         wesnoth.sides[1][key] = value
--     end
-- end

for key, value in pairs(wml.variables["stored_side"]) do
    if type(value) ~= "table" then
        if not pcall(function() wesnoth.sides[1][key] = value end) then
            print("####Skipped side property:", key, value)
        end
    else
        if value[1] == "ai" then
            print("AI")
            wesnoth.sides.switch_ai(1, {})
            wesnoth.sides.append_ai(1, value[2])
        elseif value[1] == "village" then
            print("VILLAGE")
            wesnoth.map.set_owner(value[2].x, value[2].y, 1)
        -- elseif value[1] == "unit" or value[1]== "leader" then
        --     wesnoth.units.to_map(value[2])
        else
            print("#THIS SHOULDN'T HAPPEN, PLEASE REPORT THIS! Unhandled sides subtag:", key, value)
        end
    end
end

-- local function deep_copy(src, dest)
--     for k, v in pairs(src) do
--         if type(v) == "table" then
--             dest[k] = dest[k] or {}
--             deep_copy(v, dest[k])
--         else
--             dest[k] = v
--         end
--     end
-- end
-- deep_copy(wml.variables["stored_side"], wesnoth.sides[1])


-- local function deep_copy(orig)
--     local orig_type = type(orig)
--     local copy
--     if orig_type == 'table' then
--         copy = {}
--         for orig_key, orig_value in next, orig, nil do
--             copy[deep_copy(orig_key)] = deep_copy(orig_value)
--         end
--         local mt = getmetatable(orig)
--         if type(mt) == 'table' then
--             setmetatable(copy, deep_copy(mt))
--         end
--     else
--         copy = orig
--     end
--     return copy
-- end

-- wml.variables["stored_side_copy"] = deep_copy(wml.variables["stored_side"])
>>
        [/lua]
        [modify_turns]
            current=$turn_number
        [/modify_turns]
        [redraw][/redraw]
    [/event]
[/scenario]