#textdomain wesnoth-Bandits_from_Brown_Hills
# # po: TODO
[textdomain]
    name="wesnoth-Bandits_from_Brown_Hills"
#     path="data/add-ons/Bandits_from_Brown_Hills/translations"
[/textdomain]
[language]
    range_no_retalation= _ "no retalation"
[/language]
{~add-ons/Bandits_from_Brown_Hills/team-colors.cfg}
#{~add-ons/Bandits_from_Brown_Hills/data}
[campaign]
    id=Bandits_from_Brown_Hills
    icon="data/add-ons/Bandits_from_Brown_Hills/images/BfBH_campaign_icon.png"
    image="data/add-ons/Bandits_from_Brown_Hills/images/BfBH_campaign_logo_600x264.png"
    background="data/add-ons/Bandits_from_Brown_Hills/images/story/tavern_1_wp.jpg"
    name= _ "Bandits from Brown Hills"
    abbrev= _ "BfBH"
    #rank=1
    start_year=534 YW
    end_year=535 YW
    first_scenario=01_Raid
    {CAMPAIGN_DIFFICULTY EASY "units/human-peasants/ruffian-attack-7.png~RC(magenta>red)" ( _ "Ruffian") ( _ "Medium")}
    {CAMPAIGN_DIFFICULTY NORMAL "units/human-outlaws/footpad-attack1.png~RC(magenta>red)" ( _ "Footpad") ( _ "Challenging")}{DEFAULT_DIFFICULTY}
    {CAMPAIGN_DIFFICULTY HARD "units/human-outlaws/outlaw-defend.png~RC(magenta>red)" ( _ "Outlaw") ( _ "Difficult")}
    define=Bandits_from_Brown_Hills
    description= _ "<span size='32000' font_family='Oldania ADF Std' ><span color='#baac7d'>                          Narrator</span>
The mystery man introduces himself as Wenrys
<span color='#baac7d'>                          Wenrys</span>
    I know something that could interest you
<span color='#baac7d'>                          Narrator</span>
            The man unfolds the map ...
    </span>"
    [about]
        title= _ "Campaign Design and Programming"
        [entry]
            name="Jakub Hladky (ZombieKnightCZ)"
        [/entry]
        title= _ "Dialog"
        [entry]
            name="LuminiousE"
        [/entry]
    [/about]
[/campaign]
#ifdef Bandits_from_Brown_Hills
    #  [game_config] #TODO
    #      #  hp_bar_scaling=0
    #      #  xp_bar_scaling=0
    #      #kill_experience=1000
    #  [/game_config]
    [lua]
        code=<<
wesnoth.require '~add-ons/Bandits_from_Brown_Hills/lua/items.lua'
wesnoth.require '~add-ons/Bandits_from_Brown_Hills/lua/utils.lua'
wesnoth.require '~add-ons/Bandits_from_Brown_Hills/lua/display_tip.lua'
wesnoth.require '~add-ons/Bandits_from_Brown_Hills/lua/change_ai.lua'

local upper_to_lower = {
    -- Basic Latin
    [65] = 97, [66] = 98, [67] = 99, [68] = 100, [69] = 101, [70] = 102, [71] = 103, [72] = 104, [73] = 105, [74] = 106,
    [75] = 107, [76] = 108, [77] = 109, [78] = 110, [79] = 111, [80] = 112, [81] = 113, [82] = 114, [83] = 115, [84] = 116,
    [85] = 117, [86] = 118, [87] = 119, [88] = 120, [89] = 121, [90] = 122,
    -- Latin-1 Supplement
    [192] = 224, [193] = 225, [194] = 226, [195] = 227, [196] = 228, [197] = 229, [198] = 230, [199] = 231,
    [200] = 232, [201] = 233, [202] = 234, [203] = 235, [204] = 236, [205] = 237, [206] = 238, [207] = 239,
    [208] = 240, [209] = 241, [210] = 242, [211] = 243, [212] = 244, [213] = 245, [214] = 246, [216] = 248,
    [217] = 249, [218] = 250, [219] = 251, [220] = 252, [221] = 253, [222] = 254,
    -- Latin Extended-A
    [256] = 257, [258] = 259, [260] = 261, [262] = 263, [264] = 265, [266] = 267, [268] = 269, [270] = 271,
    [272] = 273, [274] = 275, [276] = 277, [278] = 279, [280] = 281, [282] = 283, [284] = 285, [286] = 287,
    [288] = 289, [290] = 291, [292] = 293, [294] = 295, [296] = 297, [298] = 299, [300] = 301, [302] = 303,
    [304] = 105, [306] = 307, [308] = 309, [310] = 311, [313] = 314, [315] = 316, [317] = 318, [319] = 320,
    [321] = 322, [323] = 324, [325] = 326, [327] = 328, [330] = 331, [332] = 333, [334] = 335, [336] = 337,
    [338] = 339, [340] = 341, [342] = 343, [344] = 345, [346] = 347, [348] = 349, [350] = 351, [352] = 353,
    [354] = 355, [356] = 357, [358] = 359, [360] = 361, [362] = 363, [364] = 365, [366] = 367, [368] = 369,
    [370] = 371, [372] = 373, [374] = 375, [376] = 255, [377] = 378, [379] = 380, [381] = 382, [383] = 115,
    -- Latin Extended-B (full)
    [384] = 579, [385] = 595, [386] = 387, [388] = 389, [390] = 596, [391] = 392, [393] = 598, [394] = 599, [395] = 396,
    [398] = 477, [399] = 601, [400] = 603, [401] = 402, [403] = 608, [404] = 611, [406] = 617, [407] = 616, [408] = 409,
    [412] = 623, [413] = 626, [415] = 629, [416] = 417, [418] = 419, [420] = 421, [422] = 640, [423] = 424, [425] = 643,
    [428] = 429, [430] = 648, [431] = 432, [433] = 650, [434] = 651, [435] = 436, [437] = 438, [439] = 658, [440] = 441,
    [444] = 445, [452] = 454, [453] = 454, [455] = 457, [456] = 457, [458] = 460, [459] = 460, [461] = 462, [463] = 464,
    [465] = 466, [467] = 468, [469] = 470, [471] = 472, [473] = 474, [475] = 476, [478] = 479, [480] = 481, [482] = 483,
    [484] = 485, [486] = 487, [488] = 489, [490] = 491, [492] = 493, [494] = 495, [496] = 447, [497] = 499, [498] = 499,
    [500] = 501, [502] = 405, [503] = 447, [504] = 505, [506] = 507, [508] = 509, [510] = 511, [512] = 513, [514] = 515,
    [516] = 517, [518] = 519, [520] = 521, [522] = 523, [524] = 525, [526] = 527, [528] = 529, [530] = 531, [532] = 533,
    [534] = 535, [536] = 537, [538] = 539, [540] = 541, [542] = 543, [544] = 414, [546] = 547, [548] = 549, [550] = 551,
    [552] = 553, [554] = 555, [556] = 557, [558] = 559, [560] = 561, [562] = 563, [570] = 11365, [571] = 572, [573] = 410,
    [574] = 11366, [577] = 578, [580] = 649, [581] = 652, [582] = 583, [584] = 585, [586] = 587, [588] = 589, [590] = 591,
    -- Greek and Coptic
    [913] = 945, [914] = 946, [915] = 947, [916] = 948, [917] = 949, [918] = 950, [919] = 951, [920] = 952,
    [921] = 953, [922] = 954, [923] = 955, [924] = 956, [925] = 957, [926] = 958, [927] = 959, [928] = 960,
    [929] = 961, [931] = 963, [932] = 964, [933] = 965, [934] = 966, [935] = 967, [936] = 968, [937] = 969,
    [938] = 970, [939] = 971,
    -- Cyrillic
    [1040] = 1072, [1041] = 1073, [1042] = 1074, [1043] = 1075, [1044] = 1076, [1045] = 1077, [1046] = 1078, [1047] = 1079,
    [1048] = 1080, [1049] = 1081, [1050] = 1082, [1051] = 1083, [1052] = 1084, [1053] = 1085, [1054] = 1086, [1055] = 1087,
    [1056] = 1088, [1057] = 1089, [1058] = 1090, [1059] = 1091, [1060] = 1092, [1061] = 1093, [1062] = 1094, [1063] = 1095,
    [1064] = 1096, [1065] = 1097, [1066] = 1098, [1067] = 1099, [1068] = 1100, [1069] = 1101, [1070] = 1102, [1071] = 1103,
}

local lower_to_upper = {}
for upper, lower in pairs(upper_to_lower) do
    lower_to_upper[lower] = upper
end

function custom_lower(s)
    return (s:gsub(utf8.charpattern, function(c)
        local codepoint = utf8.codepoint(c)
        return utf8.char(upper_to_lower[codepoint] or codepoint)
    end))
end

function custom_upper(s)
    return (s:gsub(utf8.charpattern, function(c)
        local codepoint = utf8.codepoint(c)
        return utf8.char(lower_to_upper[codepoint] or codepoint)
    end))
end


function distance(loc1, loc2)
    local dx = loc1.x - loc2.x
    local dy = loc1.y - loc2.y
    local dz = -(dx + dy)
    return math.max(math.abs(dx), math.abs(dy), math.abs(dz))
end

function sort_loc_by_distance(my_location, locations_queue)
    -- Find the max possible distance to create buckets
    local max_distance = 0
    local distances = {}

    -- First pass: calculate distances and find max distance
    for i, loc in ipairs(locations_queue) do
        local dist = distance(my_location, loc)
        distances[i] = dist
        max_distance = math.max(max_distance, dist)
    end

    -- Create buckets
    local buckets = {}
    for i = 0, max_distance do
        buckets[i] = {}
    end

    -- Second pass: distribute locations into buckets
    for i, loc in ipairs(locations_queue) do
        local dist = distances[i]
        table.insert(buckets[dist], loc)
    end

    -- Collect locations from buckets in order
    local result = {}
    for dist = 0, max_distance do
        for _, loc in ipairs(buckets[dist]) do
            table.insert(result, loc)
        end
    end

    return result
end
function find_closest_enemy(loc,side)
    local closest_enemy = nil
    local min_dist = math.huge
    -- Iterate through all enemy units
    for _, e in ipairs(wesnoth.units.find_on_map({{"filter_side",{{"enemy_of",{side=side}}}}})) do
        local dist = distance(loc,e.loc)
        if dist < min_dist then
            min_dist = dist
            closest_enemy = e
        end
    end

    return closest_enemy, min_dist
end

function get_weapon_index (u, name)
    local i = 1
    while u.attacks[i] ~= nil do
        if u.attacks[i].name == name then
            return i
        end
        i = i + 1
    end
    return nil
end

function find_weapon(u, table)
    local i = 1
    while u.attacks[i] ~= nil do
        local matches = true
        -- Check if all keys in table match u.attacks[i]
        for key, value in pairs(table) do
            if u.attacks[i][key] ~= value then
                matches = false
                break
            end
        end
        if matches then
            return u.attacks[i], i
        end
        i = i + 1
    end
    return nil
end

-- Function to check if an item exists in the list
function list_contains(list_str, item)
    if not list_str then return false end
    for existing_item in list_str:gmatch("[^,]+") do
        if existing_item:gsub("%s+", "") == item:gsub("%s+", "") then
            return true
        end
    end
    return false
 end

 -- Function to add an item only if it doesn't exist
 function list_add_unique(list_str, item)
    if not list_str or list_str == "" then return item end
    if not list_contains(list_str, item) then
        return list_str .. "," .. item
    end
    return list_str
 end

 -- Function to remove an item if it exists
 function list_remove(list_str, item)
    if not list_str then return "" end
    local new_list = {}
    for existing_item in list_str:gmatch("[^,]+") do
        if existing_item:gsub("%s+", "") ~= item:gsub("%s+", "") then
            table.insert(new_list, existing_item)
        end
    end
    return table.concat(new_list, ",")
 end

function filter_location_by_adjacent_units(locs, criteria,filter)
    local best_loc = wesnoth.named_tuple({0, 0}, {'x', 'y'})
    local best_count = -1

    -- Convert criteria to number if it's a string
    local target_count = nil
    if criteria == "max" then
        target_count = 6  -- Maximum possible adjacent hexes
    elseif criteria == "min" then
        target_count = 0
    else
        target_count = tonumber(criteria)
    end

    for _,l in ipairs(locs) do
        local count = 0
        if wesnoth.units.get({l.x,l.y}) == nil then
            for x,y in wesnoth.current.map:iter_adjacent({l.x,l.y}) do
                if #wesnoth.units.find_on_map({x=x,y=y,filter}) ~= 0 then
                    count = count + 1
                end
            end
            print(count)
            -- For exact number matching
            if target_count ~= nil and count == target_count then
                return l
            end

            -- For max/min comparisons
            if criteria == "max" and count > best_count then
                best_count = count
                best_loc = l
            elseif criteria == "min" and (best_count == -1 or count < best_count) then
                best_count = count
                best_loc = l
            end
        end
    end

    return best_loc
end

function filter_passable_locations(locations, unit)
    local passable_locs = {}

    for _, loc in ipairs(locations) do
        -- Check if location is passable by verifying:
        -- 1. No unit exists at location
        -- 2. Location is not on map border
        -- 3. Movement cost is not 99 (impassable)
        if wesnoth.units.get(loc) == nil
           and not wesnoth.current.map:on_border(loc)
           and wesnoth.units.movement_on(unit, wesnoth.current.map[loc]) ~= 99 then
            table.insert(passable_locs, loc)
        end
    end

    return passable_locs
end

function tprint (tbl, indent)
	if not indent then indent = 0 end
	local toprint = string.rep(" ", indent) .. "{\r\n"
	indent = indent + 2
	for k, v in pairs(tbl) do
		toprint = toprint .. string.rep(" ", indent)
		if (type(k) == "number") then
			toprint = toprint .. "[" .. k .. "] = "
		elseif (type(k) == "string") then
			toprint = toprint  .. k ..  "= "
		end
		if (type(v) == "number") then
			toprint = toprint .. v .. ",\r\n"
		elseif (type(v) == "string") then
			toprint = toprint .. "\"" .. v .. "\",\r\n"
		elseif (type(v) == "table") then
			toprint = toprint .. tprint(v, indent + 2) .. ",\r\n"
		else
			toprint = toprint .. "\"" .. tostring(v) .. "\",\r\n"
		end
	end
	toprint = toprint .. string.rep(" ", indent-2) .. "}"
	return toprint
end
function tmerge(...)
    local result = {}
    local max_index = 0
    for _, tbl in ipairs({...}) do
        if type(tbl) == "table" then
            for k, v in pairs(tbl) do
                if type(k) == "number" and k > max_index then
                    result[k] = v
                    max_index = k
                elseif type(k) ~= "number" then
                    result[k] = v
                else
                    table.insert(result, v)
                end
            end
        end
    end
    return result
end

function cleanse_unit_table(ut)
--TODO WEAPON_SPECIAL_CALIBRATED poison,slow,crippled,stun,weil of the void,rested,disarmed,DISRUPTOR_STRIKE, ink,desperate dodge, death shriek, mark, bleed,SURPRISE
--TODO AGGRESSIVE,fury,CORRODE,ARMOR_BREAKING,counter?

--TODO NEW SCENARIO CLEANSE traps,undying,SURPRISE?
    return ut
end
function wesnoth.wml_actions.cleanse_unit_table( cfg )--TODO maybe move to [filter], add more cfg
    return cleanse_unit_table(cfg)
end
function cleanse_unit(u)
end
function wesnoth.wml_actions.cleanse_unit( cfg )--TODO maybe move to [filter], add more cfg
    cleanse_unit(wesnoth.units.find_on_map(cfg)[1])
end


function direction_image(dir, ne, n)
    if dir == "ne" then return ne end
    if dir == "n" then return n end
    if dir == "sw" then return ne .. "~FL(vertical,horizontal)" end
    if dir == "s" then return n .. "~FL(vertical)" end
    if dir == "se" then return ne .. "~FL(horizontal)" end
    if dir == "nw" then return ne .. "~FL(vertical)" end

    -- Return nil for invalid directions
    return nil
end

>>
    [/lua]
    #  [lua] #THIS IS IN MAINLINE 1.18+ too, so no need for this now
    #      code=<<
    #      local _ = wesnoth.textdomain "wesnoth-Bandits_from_Brown_Hills"
    #      local old_unit_status = wesnoth.interface.game_display.unit_status

    #      function wesnoth.interface.game_display.unit_status()
    #          local u = wesnoth.interface.get_displayed_unit()
    #          if not u then return {} end
    #          local s = old_unit_status()
    #          if u.status.stunned then
    #              table.insert(s, { "element",  { image = "misc/stunned-status-icon.png",
    #                                              tooltip = _"stunned: This unit is stunned. It cannot enforce its Zone of Control and looses half of movement points."
    #              } } )
    #          end
    #          return s
    #      end
    #      >>
    #  [/lua]
    [lua]
        code=<<
BfBH={}
BfBH.filter={}
BfBH.table={}
BfBH.combat={}
BfBH.reanimated={}
BfBH.unit_tree={}
BfBH.unit={}
BfBH.unit.variables={}
BfBH.filter.unhides = function(u) --not used, WORKS, just doesn't properly work with pre-show
    return #wesnoth.units.find_on_map({ability="reveals",{"filter_location",{x=u.x,y=u.y,radius=3}},{"filter_side",{{"enemy_of",{side=u.side}}}}}) == 0
end
BfBH.filter.death_shriek = function(u)
    local variables = wml.get_child(u.__cfg, "variables")
    if variables.ringing_ears_remove_turn and variables.ringing_ears_remove_turn <= wml.variables["turn_number"] then
        return true
    else
        return false
    end
end
BfBH.table.deep_compare=function(t1, t2)
    if type(t1) ~= 'table' or type(t2) ~= 'table' then
        return false
    end
    local function compare_tables(table1, table2)
        if table1 == nil or table2 == nil then
            return false
        end
        for key, value in pairs(table1) do
            if type(value) == 'table' then
                if not compare_tables(value, table2[key]) then
                    return false
                end
            else
                if value ~= table2[key] then
                    return false
                end
            end
        end
        for key in pairs(table2) do
            if table1[key] == nil then
                return false
            end
        end
        return true
    end
    return compare_tables(t1, t2)
end
BfBH.table.std_print=function(t, indent)
    indent = indent or 0
    local indentation = string.rep("  ", indent)
    if type(t) ~= "table" then
        std_print(indentation .. tostring(t))
        return
    end
    std_print(indentation .. "{")
    for key, value in pairs(t) do
        local formattedKey
        if type(key) == "number" then
            formattedKey = "[" .. key .. "]"
        else
            formattedKey = tostring(key)
        end
        if type(value) == "table" then
            std_print(indentation .. "  " .. formattedKey .. " =")
            BfBH.table.std_print(value, indent + 1)
        else
            std_print(indentation .. "  " .. formattedKey .. " = " .. tostring(value))
        end
    end
    std_print(indentation .. "}")
end
BfBH.reanimated.get_base_units_bfs=function(start_unit_type, base_units)
    if start_unit_type == nil or start_unit_type == "" then
        return {}
    end
    local queue = {start_unit_type}
    local visited = {[start_unit_type] = true}
    local found_base_units = {}
    local base_units_set = {}
    for _, unit in ipairs(base_units) do
        base_units_set[unit] = true
    end
    while #queue > 0 do
        local current_type = table.remove(queue, 1)
        if base_units_set[current_type] then
            table.insert(found_base_units, current_type)
        end
        local lower_units = BfBH.unit_tree.move_down[current_type] or {}
        for _, unit_type in ipairs(lower_units) do
            if not visited[unit_type] then
                visited[unit_type] = true
                table.insert(queue, unit_type)
            end
        end
    end
    if #found_base_units == 0 then
        local queue = {start_unit_type}
        local visited = {[start_unit_type] = true}
        while #queue > 0 do
            local current_type = table.remove(queue, 1)
            if base_units_set[current_type] then
                table.insert(found_base_units, current_type)
            end
            local lower_units = wesnoth.unit_types[current_type].advances_to or {}
            for _, unit_type in ipairs(lower_units) do
                if not visited[unit_type] then
                    visited[unit_type] = true
                    table.insert(queue, unit_type)
                end
            end
        end
    end
    return found_base_units
end
BfBH.reanimated.get_random_element=function(table)
    if #table == 0 then
        return ""
    end
    return table[mathx.random(#table)]
end
BfBH.unit.variables.add_to_list = function(unit, list_name, new_item)
    local current_list = unit.variables[list_name] or ""
    if current_list == "" then
        unit.variables[list_name] = new_item
    else
        unit.variables[list_name] = current_list .. "," .. new_item
    end
end
BfBH.unit.path_locs = function (path)
	if path.location_id then
		local function special_locations()
			return function()
				for _,loc in ipairs(tostring(path.location_id):split()) do
					loc = wesnoth.current.map.special_locations[loc]
					if loc then coroutine.yield(loc.x, loc.y) end
				end
			end
		end
		return coroutine.wrap(special_locations())
	elseif path.dir then
		local function relative_locations()
			return function(u)
				local last = {x = u.x, y = u.y}
				for _,dir in ipairs(path.dir:split()) do
					local count = 1
					if dir:find(":") then
						local error_dir = dir
						dir, count = dir:match("([a-z]+):(%d+)")
						if not dir or not count then
							wml.error("Invalid direction:count in move_unit: " .. error_dir)
						end
					end
					local next_loc = wesnoth.map.get_direction(last.x, last.y, dir, count)
					coroutine.yield(next_loc[1], next_loc[2])
					last.x, last.y = next_loc[1], next_loc[2]
				end
			end
		end
		return coroutine.wrap(relative_locations())
	else
		local function abs_locations(coord)
			return function()
				for _,s in ipairs(tostring(path[coord]):split()) do
					coroutine.yield(tonumber(s))
				end
			end
		end
		-- Double-coroutining seems a bit excessive but I can't think of a better way to do this?
		return coroutine.wrap(function()
			local xs, ys = coroutine.wrap(abs_locations('to_x')), coroutine.wrap(abs_locations('to_y'))
			repeat
				local x, y = xs(), ys()
				coroutine.yield(x, y)
			until x == nil or y == nil
		end)
	end
end
BfBH.unit.move = function (cfg)
    local coordinate_error = "invalid location in BfBH.unit.move"
	local path
	if cfg.to_location then
		path = {location_id = cfg.to_location}
	elseif cfg.dir then
		path = {dir = cfg.dir}
	else
		path = {to_x = cfg.to_x, to_y = cfg.to_y}
	end
	if not path then
		wml.error(coordinate_error)
	end
	local fire_event = cfg.fire_event
	local unshroud = cfg.clear_shroud
	local muf_force_scroll = cfg.force_scroll
	local check_passability = cfg.check_passability
	if check_passability == nil then check_passability = true end
	cfg = wml.literal(cfg)
	cfg.to_location, cfg.to_x, cfg.to_y, cfg.fire_event, cfg.clear_shroud = nil, nil, nil, nil, nil
	local units = wesnoth.units.find_on_map(cfg)

	for current_unit_index, current_unit in ipairs(units) do
		if not fire_event or current_unit.valid then
			local locs = BfBH.unit.path_locs(path)
			local x_list = {current_unit.x}
			local y_list = {current_unit.y}
			local pass_check = nil
			if check_passability then pass_check = current_unit end

			current_unit:extract()
			local x, y = locs(current_unit)
			local prevX, prevY = tonumber(current_unit.x), tonumber(current_unit.y)
			while true do
				x = tonumber(x) or current_unit:to_map(false) or wml.error(coordinate_error)
				y = tonumber(y) or current_unit:to_map(false) or wml.error(coordinate_error)
				if not (x == prevX and y == prevY) then x, y = wesnoth.paths.find_vacant_hex(x, y, pass_check) end
				if not x or not y then wml.error("Could not find a suitable hex near to one of the target hexes in [move_unit].") end
				table.insert(x_list, x)
				table.insert(y_list, y)
				local next_x, next_y = locs(current_unit)
				if not next_x and not next_y then break end
				prevX, prevY = x, y
				x, y = next_x, next_y
			end

			if current_unit.x < x then current_unit.facing = "se"
			elseif current_unit.x > x then current_unit.facing = "sw"
			end

			local current_unit_cfg = current_unit.__cfg
			for i = 1, (#x_list - 1) do
                wesnoth.wml_actions.move_unit_fake {
                    type = current_unit_cfg.type,
                    gender = current_unit_cfg.gender,
                    variation = current_unit_cfg.variation,
                    image_mods = current_unit.image_mods,
                    side = current_unit_cfg.side,
                    x = x_list[i],
                    y = y_list[i],
                    force_scroll = muf_force_scroll
                }
            end
			local x2, y2 = current_unit.x, current_unit.y
			current_unit.x, current_unit.y = x, y
			current_unit:to_map(false)
			if unshroud then
				wesnoth.wml_actions.redraw {clear_shroud=true}
			end

			if fire_event then
				wesnoth.game_events.fire("moveto", x, y, x2, y2)
			end
		end
	end
end



-- BfBH.combat.best_defender_weapon=function(attacker, defender, attacker_weapon) --takes name of WML variable as first two parameters, number as a third, returns index or false if theres an inconvenience
--     local i = 0
--     while wml.variables[""..defender.."[0].attack["..i.."]"] ~= nil do
--         if wml.variables[""..defender.."[0].attack["..i.."].range"] == wml.variables[""..attacker.."[0].attack["..attacker_weapon.."].range"] then
--             local a1, b1, c1, d1 =wesnoth.simulate_combat(wesnoth.units.get(wml.variables[""..attacker.."[0].id"]),(attacker_weapon + 1), wesnoth.units.get(wml.variables[""..defender.."[0].id"]))
--             local a2, b2, c2, d2 =wesnoth.simulate_combat(wesnoth.units.get(wml.variables[""..attacker.."[0].id"]),(attacker_weapon + 1), wesnoth.units.get(wml.variables[""..defender.."[0].id"]), (i + 1))
--             if BfBH.table.deep_compare(a1,a2) and BfBH.table.deep_compare(b1,b2) and BfBH.table.deep_compare(c1,c2) and BfBH.table.deep_compare(d1,d2) then
--                 return i
--             end
--         end
--         i = i + 1
--     end
--     return false
-- end
>>
    [/lua]
    #TODO ADD FONT once it can be added
    [fonts]
        family_order= _ "KelmscottRomanNF"
        family_order_monospace= _ "KelmscottRomanNF"
        family_order_light= _ "KelmscottRomanNF"
        family_order_script = _ "KelmscottRomanNF"
    [/fonts]
    [binary_path]
        path=data/add-ons/Bandits_from_Brown_Hills
    [/binary_path]
    [lua]
      code="wesnoth.require '~add-ons/Bandits_from_Brown_Hills/lua/narration.lua'"
    [/lua]
    #{~add-ons/Bandits_from_Brown_Hills/ai}
    #{~add-ons/Bandits_from_Brown_Hills/ai}
    {~add-ons/Bandits_from_Brown_Hills/ai/lua}
    {~add-ons/Bandits_from_Brown_Hills/ai/ais}
    {~add-ons/Bandits_from_Brown_Hills/ai/utils}
    {~add-ons/Bandits_from_Brown_Hills/fonts}
    {~add-ons/Bandits_from_Brown_Hills/sounds}
    {~add-ons/Bandits_from_Brown_Hills/music}
    {~add-ons/Bandits_from_Brown_Hills/utils}
    {~add-ons/Bandits_from_Brown_Hills/themes}
    {~add-ons/Bandits_from_Brown_Hills/terrain-graphics.cfg}
    {~add-ons/Bandits_from_Brown_Hills/terrain.cfg}
    {~add-ons/Bandits_from_Brown_Hills/scenarios}
    [units]
        {~add-ons/Bandits_from_Brown_Hills/units}
    [/units]
#endif
#ifdef EDITOR
    [binary_path]
        path=data/add-ons/Bandits_from_Brown_Hills
    [/binary_path]
    [editor_group]
        id=bandits_from_brown_hills
        name= _ "Bandits_from_Brown_Hills"
        icon="group_mainline"
    [/editor_group]
    {~add-ons/Bandits_from_Brown_Hills/terrain-graphics.cfg}
    {~add-ons/Bandits_from_Brown_Hills/terrain.cfg}
#endif
