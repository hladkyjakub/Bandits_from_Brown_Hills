#textdomain wesnoth-Bandits_from_Brown_Hills
# # po: TODO
[textdomain]
    name="wesnoth-Bandits_from_Brown_Hills"
#     path="data/add-ons/Bandits_from_Brown_Hills/translations"
[/textdomain]
[language]
    range_no_retalation= _ "no retalation"
[/language]
{~add-ons/Bandits_from_Brown_Hills/team-colors.cfg}
#{~add-ons/Bandits_from_Brown_Hills/data}
[campaign]
    id=Bandits_from_Brown_Hills
    icon="data/add-ons/Bandits_from_Brown_Hills/images/BfBH_campaign_icon.png"
    image="data/add-ons/Bandits_from_Brown_Hills/images/BfBH_campaign_logo_600x264.png"
    background="data/add-ons/Bandits_from_Brown_Hills/images/story/tavern_1_wp.jpg"
    name= _ "Bandits from Brown Hills"
    abbrev= _ "BfBH"
    #rank=1
    start_year=534 YW
    end_year=535 YW
    first_scenario=01_Raid
    {CAMPAIGN_DIFFICULTY EASY "units/human-peasants/ruffian-attack-7.png~RC(magenta>red)" ( _ "Ruffian") ( _ "Medium")}
    {CAMPAIGN_DIFFICULTY NORMAL "units/human-outlaws/footpad-attack1.png~RC(magenta>red)" ( _ "Footpad") ( _ "Challenging")}{DEFAULT_DIFFICULTY}
    {CAMPAIGN_DIFFICULTY HARD "units/human-outlaws/outlaw-defend.png~RC(magenta>red)" ( _ "Outlaw") ( _ "Difficult")}
    define=Bandits_from_Brown_Hills
    description= _ "<span size='32000' font_family='Oldania ADF Std' ><span color='#baac7d'>                          Narrator</span>
The mystery man introduces himself as Wenrys
<span color='#baac7d'>                          Wenrys</span>
    I know something that could interest you
<span color='#baac7d'>                          Narrator</span>
            The man unfolds the map ...
    </span>"
    [about]
        title= _ "Campaign Design and Programming"
        [entry]
            name="Jakub Hladky (ZombieKnightCZ)"
        [/entry]
        title= _ "Dialog"
        [entry]
            name="LuminiousE"
        [/entry]
    [/about]
[/campaign]
#ifdef Bandits_from_Brown_Hills
    #  [game_config] #TODO
    #      #  hp_bar_scaling=0
    #      #  xp_bar_scaling=0
    #      #kill_experience=1000
    #  [/game_config]
    [lua]
        code="wesnoth.require '~add-ons/Bandits_from_Brown_Hills/lua/items.lua'"
    [/lua]
    [lua]
        code="wesnoth.require '~add-ons/Bandits_from_Brown_Hills/lua/utils.lua'"
    [/lua]
    [lua]
        code=<<
        local _ = wesnoth.textdomain "wesnoth-Bandits_from_Brown_Hills"
        local old_unit_status = wesnoth.interface.game_display.unit_status

        function wesnoth.interface.game_display.unit_status()
            local u = wesnoth.interface.get_displayed_unit()
            if not u then return {} end
            local s = old_unit_status()
            if u.status.stunned then
                table.insert(s, { "element",  { image = "misc/stunned-status-icon.png",
                                                tooltip = _"stunned: This unit is stunned. It cannot enforce its Zone of Control and looses half of movement points."
                } } )
            end
            return s
        end
        >>
    [/lua]
    [lua]
        code=<<
BfBH={}
BfBH.filter={}
BfBH.table={}
BfBH.combat={}
BfBH.reanimated={}
BfBH.unit_tree={}
BfBH.unit={}
BfBH.unit.variables={}
BfBH.filter.death_shriek = function(u)
    local variables = wml.get_child(u.__cfg, "variables")
    if variables.ringing_ears_remove_turn and variables.ringing_ears_remove_turn <= wml.variables["turn_number"] then
        return true
    else
        return false
    end
end
BfBH.table.deep_compare=function(t1, t2)
    if type(t1) ~= 'table' or type(t2) ~= 'table' then
        return false
    end
    local function compare_tables(table1, table2)
        if table1 == nil or table2 == nil then
            return false
        end
        for key, value in pairs(table1) do
            if type(value) == 'table' then
                if not compare_tables(value, table2[key]) then
                    return false
                end
            else
                if value ~= table2[key] then
                    return false
                end
            end
        end
        for key in pairs(table2) do
            if table1[key] == nil then
                return false
            end
        end
        return true
    end
    return compare_tables(t1, t2)
end
BfBH.table.std_print=function(t, indent)
    indent = indent or 0
    local indentation = string.rep("  ", indent)
    if type(t) ~= "table" then
        std_print(indentation .. tostring(t))
        return
    end
    std_print(indentation .. "{")
    for key, value in pairs(t) do
        local formattedKey
        if type(key) == "number" then
            formattedKey = "[" .. key .. "]"
        else
            formattedKey = tostring(key)
        end    
        if type(value) == "table" then
            std_print(indentation .. "  " .. formattedKey .. " =")
            BfBH.table.std_print(value, indent + 1)
        else
            std_print(indentation .. "  " .. formattedKey .. " = " .. tostring(value))
        end
    end
    std_print(indentation .. "}")
end
BfBH.reanimated.get_base_units_bfs=function(start_unit_type, base_units)
    if start_unit_type == nil or start_unit_type == "" then
        return {}
    end
    local queue = {start_unit_type}
    local visited = {[start_unit_type] = true}
    local found_base_units = {}
    local base_units_set = {}
    for _, unit in ipairs(base_units) do
        base_units_set[unit] = true
    end
    while #queue > 0 do
        local current_type = table.remove(queue, 1)
        if base_units_set[current_type] then
            table.insert(found_base_units, current_type)
        end
        local lower_units = BfBH.unit_tree.move_down[current_type] or {}
        for _, unit_type in ipairs(lower_units) do
            if not visited[unit_type] then
                visited[unit_type] = true
                table.insert(queue, unit_type)
            end
        end
    end
    if #found_base_units == 0 then
        local queue = {start_unit_type}
        local visited = {[start_unit_type] = true}
        while #queue > 0 do
            local current_type = table.remove(queue, 1)
            if base_units_set[current_type] then
                table.insert(found_base_units, current_type)
            end
            local lower_units = wesnoth.unit_types[current_type].advances_to or {}
            for _, unit_type in ipairs(lower_units) do
                if not visited[unit_type] then
                    visited[unit_type] = true
                    table.insert(queue, unit_type)
                end
            end
        end
    end
    return found_base_units
end
BfBH.reanimated.get_random_element=function(table)
    if #table == 0 then
        return ""
    end
    return table[mathx.random(#table)]
end
BfBH.unit.variables.add_to_list = function(unit, list_name, new_item)
    local current_list = unit.variables[list_name] or ""
    if current_list == "" then
        unit.variables[list_name] = new_item
    else
        unit.variables[list_name] = current_list .. "," .. new_item
    end
end
BfBH.unit.path_locs = function (path)
	if path.location_id then
		local function special_locations()
			return function()
				for _,loc in ipairs(tostring(path.location_id):split()) do
					loc = wesnoth.current.map.special_locations[loc]
					if loc then coroutine.yield(loc.x, loc.y) end
				end
			end
		end
		return coroutine.wrap(special_locations())
	elseif path.dir then
		local function relative_locations()
			return function(u)
				local last = {x = u.x, y = u.y}
				for _,dir in ipairs(path.dir:split()) do
					local count = 1
					if dir:find(":") then
						local error_dir = dir
						dir, count = dir:match("([a-z]+):(%d+)")
						if not dir or not count then
							wml.error("Invalid direction:count in move_unit: " .. error_dir)
						end
					end
					local next_loc = wesnoth.map.get_direction(last.x, last.y, dir, count)
					coroutine.yield(next_loc[1], next_loc[2])
					last.x, last.y = next_loc[1], next_loc[2]
				end
			end
		end
		return coroutine.wrap(relative_locations())
	else
		local function abs_locations(coord)
			return function()
				for _,s in ipairs(tostring(path[coord]):split()) do
					coroutine.yield(tonumber(s))
				end
			end
		end
		-- Double-coroutining seems a bit excessive but I can't think of a better way to do this?
		return coroutine.wrap(function()
			local xs, ys = coroutine.wrap(abs_locations('to_x')), coroutine.wrap(abs_locations('to_y'))
			repeat
				local x, y = xs(), ys()
				coroutine.yield(x, y)
			until x == nil or y == nil
		end)
	end
end
BfBH.unit.move = function (cfg)
    local coordinate_error = "invalid location in BfBH.unit.move"
	local path
	if cfg.to_location then
		path = {location_id = cfg.to_location}
	elseif cfg.dir then
		path = {dir = cfg.dir}
	else
		path = {to_x = cfg.to_x, to_y = cfg.to_y}
	end
	if not path then
		wml.error(coordinate_error)
	end
	local fire_event = cfg.fire_event
	local unshroud = cfg.clear_shroud
	local muf_force_scroll = cfg.force_scroll
	local check_passability = cfg.check_passability
	if check_passability == nil then check_passability = true end
	cfg = wml.literal(cfg)
	cfg.to_location, cfg.to_x, cfg.to_y, cfg.fire_event, cfg.clear_shroud = nil, nil, nil, nil, nil
	local units = wesnoth.units.find_on_map(cfg)

	for current_unit_index, current_unit in ipairs(units) do
		if not fire_event or current_unit.valid then
			local locs = BfBH.unit.path_locs(path)
			local x_list = {current_unit.x}
			local y_list = {current_unit.y}
			local pass_check = nil
			if check_passability then pass_check = current_unit end
            
			current_unit:extract()
			local x, y = locs(current_unit)
			local prevX, prevY = tonumber(current_unit.x), tonumber(current_unit.y)
			while true do
				x = tonumber(x) or current_unit:to_map(false) or wml.error(coordinate_error)
				y = tonumber(y) or current_unit:to_map(false) or wml.error(coordinate_error)
				if not (x == prevX and y == prevY) then x, y = wesnoth.paths.find_vacant_hex(x, y, pass_check) end
				if not x or not y then wml.error("Could not find a suitable hex near to one of the target hexes in [move_unit].") end
				table.insert(x_list, x)
				table.insert(y_list, y)
				local next_x, next_y = locs(current_unit)
				if not next_x and not next_y then break end
				prevX, prevY = x, y
				x, y = next_x, next_y
			end

			if current_unit.x < x then current_unit.facing = "se"
			elseif current_unit.x > x then current_unit.facing = "sw"
			end

			local current_unit_cfg = current_unit.__cfg
			for i = 1, (#x_list - 1) do
                wesnoth.wml_actions.move_unit_fake {
                    type = current_unit_cfg.type,
                    gender = current_unit_cfg.gender,
                    variation = current_unit_cfg.variation,
                    image_mods = current_unit.image_mods,
                    side = current_unit_cfg.side,
                    x = x_list[i],
                    y = y_list[i],
                    force_scroll = muf_force_scroll
                }
            end
			local x2, y2 = current_unit.x, current_unit.y
			current_unit.x, current_unit.y = x, y
			current_unit:to_map(false)
			if unshroud then
				wesnoth.wml_actions.redraw {clear_shroud=true}
			end

			if fire_event then
				wesnoth.game_events.fire("moveto", x, y, x2, y2)
			end
		end
	end
end



-- BfBH.combat.best_defender_weapon=function(attacker, defender, attacker_weapon) --takes name of WML variable as first two parameters, number as a third, returns index or false if theres an inconvenience
--     local i = 0
--     while wml.variables[""..defender.."[0].attack["..i.."]"] ~= nil do
--         if wml.variables[""..defender.."[0].attack["..i.."].range"] == wml.variables[""..attacker.."[0].attack["..attacker_weapon.."].range"] then
--             local a1, b1, c1, d1 =wesnoth.simulate_combat(wesnoth.units.get(wml.variables[""..attacker.."[0].id"]),(attacker_weapon + 1), wesnoth.units.get(wml.variables[""..defender.."[0].id"]))
--             local a2, b2, c2, d2 =wesnoth.simulate_combat(wesnoth.units.get(wml.variables[""..attacker.."[0].id"]),(attacker_weapon + 1), wesnoth.units.get(wml.variables[""..defender.."[0].id"]), (i + 1))
--             if BfBH.table.deep_compare(a1,a2) and BfBH.table.deep_compare(b1,b2) and BfBH.table.deep_compare(c1,c2) and BfBH.table.deep_compare(d1,d2) then
--                 return i
--             end
--         end
--         i = i + 1
--     end
--     return false
-- end
>>
    [/lua]
    #TODO ADD FONT once it can be added
    [fonts]
        family_order= _ "KelmscottRomanNF"
        family_order_monospace= _ "KelmscottRomanNF"
        family_order_light= _ "KelmscottRomanNF"
        family_order_script = _ "KelmscottRomanNF"
    [/fonts]
    [binary_path]
        path=data/add-ons/Bandits_from_Brown_Hills
    [/binary_path]
    [lua]
      code="wesnoth.require '~add-ons/Bandits_from_Brown_Hills/lua/narration.lua'"
    [/lua]
    #{~add-ons/Bandits_from_Brown_Hills/ai}
    [ai]
        id=ai_BfBH_default_rca
        description=_"desc"
        [stage]
            name="empty"
        [/stage]
    [/ai]
    {~add-ons/Bandits_from_Brown_Hills/fonts}
    {~add-ons/Bandits_from_Brown_Hills/sounds}
    {~add-ons/Bandits_from_Brown_Hills/utils}
    {~add-ons/Bandits_from_Brown_Hills/themes}
    {~add-ons/Bandits_from_Brown_Hills/terrain-graphics.cfg}
    {~add-ons/Bandits_from_Brown_Hills/terrain.cfg}
    {~add-ons/Bandits_from_Brown_Hills/scenarios}
    [units]
        {~add-ons/Bandits_from_Brown_Hills/units}
    [/units]
#endif
#ifdef EDITOR
    [binary_path]
        path=data/add-ons/Bandits_from_Brown_Hills
    [/binary_path]
    [editor_group]
        id=bandits_from_brown_hills
        name= _ "Bandits_from_Brown_Hills"
        icon="group_mainline"
    [/editor_group]
    {~add-ons/Bandits_from_Brown_Hills/terrain-graphics.cfg}
    {~add-ons/Bandits_from_Brown_Hills/terrain.cfg}
#endif
