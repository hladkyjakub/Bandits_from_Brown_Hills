#This is for testing WML purpose (MEGA usefull)
#alias e=lua wesnoth.require("wml-utils").handle_event_commands(wml.tovconfig(wml.load("~add-ons/Bandits_from_Brown_Hills/test_WML_event.cfg")))
[lua] #LOADING
    code=<<
for key, value in pairs(wml.all_variables) do wml.variables[key] = nil end
for index, elem in ipairs(wml.all_variables) do wml.variables[""..elem[1].."[0]"] = nil end
wesnoth.wml_actions.capture_village({})
wesnoth.wml_actions.get_global_variable(
{
namespace="Bandits_from_Brown_Hills",
to_local="save_data",
from_global="save_file",
side=1,
}
)
for key, value in pairs(wml.variables["save_data"]) do
    if type(value) ~= "table" then
        wml.variables[key] = value
    end
end
for index, elem in ipairs(wml.variables["save_data"]) do
    if elem[1] ~= "save_data" then
        local i = 0
        while wml.variables[""..elem[1].."["..i.."]"] ~= nil do
            i = i + 1
        end
        wml.variables[""..elem[1].."["..i.."]"] = elem[2]
    end
end
wesnoth.wml_actions.kill({})

for key, value in ipairs(wml.array_variables.units_to_store) do
    std_print(value.x)
-- for topkey, topvalue in pairs(value) do
--     std_print(topkey .. ": " .. tostring(topvalue))
--     if type(topvalue) == "table" then
--         for subKey, subValue in pairs(topvalue) do
--             std_print("    " .. subKey .. ": " .. tostring(subValue))
--         end
--     end
-- end
    if value.x and value.y and value.type then
        wesnoth.units.to_map(value)
    end
end
wml.variables["units_to_store"] = nil

wesnoth.scenario.turns = wml.variables["turn_limit"]

for topkey, topvalue in ipairs(wml.array_variables.stored_side) do
    std_print("Loop")
    if(topvalue.gold)then
        std_print(topkey,topvalue)
        for key, value in pairs(topvalue) do
            if type(value) ~= "table" then
                if not pcall(function() wesnoth.sides[topkey][key] = value end) then
                    std_print("####Skipped side property:", key, value)
                end
            else
                if value[1] == "ai" then
                    std_print("AI")
                    wesnoth.sides.switch_ai(topkey, {})
                    wesnoth.sides.append_ai(topkey, value[2])
                elseif value[1] == "village" then
                    std_print("VILLAGE")
                    wesnoth.map.set_owner(value[2].x, value[2].y, topkey)
                -- elseif value[1] == "unit" or value[1]== "leader" then
                --     wesnoth.units.to_map(value[2])
                else
                    std_print("#THIS SHOULDN'T HAPPEN, PLEASE REPORT THIS! Unhandled sides subtag:", key, value)
                end
            end
        end
    end
end

-- for key, value in pairs(wml.variables["stored_sides"]) do
--     if type(value) ~= "table" then
--         if not pcall(function() wesnoth.sides[1][key] = value end) then
--             print("####Skipped side property:", key, value)
--         end
--     else
--         if value[1] == "ai" then
--             print("AI")
--             wesnoth.sides.switch_ai(1, {})
--             wesnoth.sides.append_ai(1, value[2])
--         elseif value[1] == "village" then
--             print("VILLAGE")
--             wesnoth.map.set_owner(value[2].x, value[2].y, 1)
--         -- elseif value[1] == "unit" or value[1]== "leader" then
--         --     wesnoth.units.to_map(value[2])
--         else
--             print("#THIS SHOULDN'T HAPPEN, PLEASE REPORT THIS! Unhandled sides subtag:", key, value)
--         end
--     end
-- end
>>
[/lua]
[modify_turns]
    current=$turn_number
[/modify_turns]
[redraw][/redraw]


#  [store_unit]
#      [filter]
#          x,y=11,6
#      [/filter]
#      variable = unit
#  [/store_unit]
#  [lua]
#      code=<<
#  local u_table = wml.variables["unit"]
#  local variables = wml.get_child(u_table, "variables")
#  if variables.bleed == nil or variables.bleed == "" then
#      variables.bleed = 1
#  else
#      variables.bleed = (variables.bleed + 1)
#  end
#  variables.bleed_inflicted= wml.variables["unit"].id
#  wesnoth.units.erase(u_table.x,u_table.y)
#  wesnoth.units.to_map(u_table)
#  >>
#  [/lua]


#  [store_unit]
#      variable = unit
#  [/store_unit]
#  [store_unit]
#      [filter]
#          x,y=11,31
#      [/filter]
#      variable = second_unit
#  [/store_unit]
#  [lua]
#      code=<<
#  unit = wesnoth.units.get(v["second_unit[0].id"])
#  if wml.variables["unit[0].level"] == 0 then
#      unit.experience = wesnoth.game_config.kill_experience * 0.5
#  else
#      unit.experience = unit.experience +(wml.variables["unit[0].level"] * wesnoth.game_config.kill_experience)
#  end>>
#  [/lua]

#  function printTable(t, indent)
#      indent = indent or 0
#      local indentation = string.rep("  ", indent)

#      if type(t) ~= "table" then
#          std_print(indentation .. tostring(t))
#          return
#      end

#      print(indentation .. "{")
#      for key, value in pairs(t) do
#          local formattedKey
#          if type(key) == "number" then
#              formattedKey = "[" .. key .. "]"
#          else
#              formattedKey = tostring(key)
#          end
        
#          if type(value) == "table" then
#              std_print(indentation .. "  " .. formattedKey .. " =")
#              printTable(value, indent + 1)
#          else
#              std_print(indentation .. "  " .. formattedKey .. " = " .. tostring(value))
#          end
#      end
#      std_print(indentation .. "}")
#  end
#  [unstore_unit]
#      variable=units_to_store[0]
#      x,y=$units_to_store[0].x, $units_to_store[0].y
#  [/unstore_unit]
#  for key, value in pairs(wml.all_variables) do wml.variables[key] = nil end
#  for index, elem in ipairs(wml.all_variables) do wml.variables[""..elem[1].."[0]"] = nil end
#  wesnoth.wml_actions.get_global_variable(
#  {
#  namespace="Bandits_from_Brown_Hills",
#  to_local="save_data",
#  from_global="save_file",
#  side=1,
#  }
#  )
#  local tags = {}
#  for index, elem in ipairs(wml.variables["save_data"]) do
#  	std_print(index, elem, elem[1], elem[2])
#      wml.variables[elem[1]] = elem[2]
#  end


### PUT VARIABLES IN
#  for key, value in pairs(wml.variables["save_data"]) do
#      if type(value) ~= "table" then
#          wml.variables[key] = value
#      end
#  end

#  [get_global_variable]
#      namespace=Bandits_from_Brown_Hills
#      from_global=save_file
#      to_local=save_data
#      side=1
#  [/get_global_variable]



# PRINT NESTED TABLE
#  for key, value in pairs(wml.variables["save_file"]) do
#      std_print(key .. ": " .. tostring(value))
#      if type(value) == "table" then
#          for subKey, subValue in pairs(value) do
#              std_print("    " .. subKey .. ": " .. tostring(subValue))
#          end
#      end
#  end


# REMOVING OLD WML
#  [lua]
#      code=<<
#  for key, value in pairs(wml.all_variables) do wml.variables[key] = nil end
#  for index, elem in ipairs(wml.all_variables) do wml.variables[""..elem[1].."[0]"] = nil end
#  >>
#  [/lua]


#  [lua] # FOR SAVING
#      code=<<
#  wml.variables.save_data = wml.all_variables
#  wesnoth.wml_actions.set_global_variable(
#  {
#  namespace="Bandits_from_Brown_Hills",
#  from_local="save_data",
#  to_global="save_file",
#  side=1,
#  immediate=true,
#  }
#  )
#  >>
#  [/lua]
