#This is for testing WML purpose (MEGA usefull)
#alias e2=lua wesnoth.require("wml-utils").handle_event_commands(wml.tovconfig(wml.load("~add-ons/Bandits_from_Brown_Hills/test_WML_event_2.cfg")))
[lua] #SAVING
    code=<<
local index = 0
for _, unit in ipairs(wesnoth.units.find()) do
    if unit.type and unit.__cfg then
        wml.variables["units_to_store["..index.."]"] = unit.__cfg
        index = index + 1
    end
end
index = 0
for _, side in ipairs(wesnoth.sides.find()) do
    if side.gold and side.__cfg then
        wml.variables["stored_side["..index.."]"] = side.__cfg
        index = index + 1
    end
end
wml.variables["turn_limit"] = wesnoth.scenario.turns
wml.variables.save_data = wml.all_variables
wesnoth.wml_actions.set_global_variable(
{
namespace="Bandits_from_Brown_Hills",
from_local="save_data",
to_global="save_file",
side=1,
immediate=true,
}
)
>>
[/lua]
#  for key, value in pairs(wml.all_variables) do wml.variables[key] = nil end
#  for index, elem in ipairs(wml.all_variables) do wml.variables[""..elem[1].."[0]"] = nil end
#  wesnoth.wml_actions.get_global_variable(
#  {
#  namespace="Bandits_from_Brown_Hills",
#  to_local="save_data",
#  from_global="save_file",
#  side=1,
#  }
#  )
#  local tags = {}
#  for index, elem in ipairs(wml.variables["save_data"]) do
#  	std_print(index, elem, elem[1], elem[2])
#      wml.variables[elem[1]] = elem[2]
#  end


### PUT VARIABLES IN
#  for key, value in pairs(wml.variables["save_data"]) do
#      if type(value) ~= "table" then
#          wml.variables[key] = value
#      end
#  end

#  [get_global_variable]
#      namespace=Bandits_from_Brown_Hills
#      from_global=save_file
#      to_local=save_data
#      side=1
#  [/get_global_variable]



# PRINT NESTED TABLE
#  for key, value in pairs(wml.variables["save_file"]) do
#      std_print(key .. ": " .. tostring(value))
#      if type(value) == "table" then
#          for subKey, subValue in pairs(value) do
#              std_print("    " .. subKey .. ": " .. tostring(subValue))
#          end
#      end
#  end


# REMOVING OLD WML
#  [lua]
#      code=<<
#  for key, value in pairs(wml.all_variables) do wml.variables[key] = nil end
#  for index, elem in ipairs(wml.all_variables) do wml.variables[""..elem[1].."[0]"] = nil end
#  >>
#  [/lua]


#  [lua] # FOR SAVING
#      code=<<
#  wml.variables.save_data = wml.all_variables
#  wesnoth.wml_actions.set_global_variable(
#  {
#  namespace="Bandits_from_Brown_Hills",
#  from_local="save_data",
#  to_global="save_file",
#  side=1,
#  immediate=true,
#  }
#  )
#  >>
#  [/lua]
