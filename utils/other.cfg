#textdomain wesnoth-Bandits_from_Brown_Hills
#define CANCELLED_ATTACK_FILTER
    [and]
        [variable]
            name=attack_was_cancelled
            equals=no
        [/variable]
    [/and]
#enddef
#define IMPLEMENT_DWARVISH_CANNONER_ENEMY_ONLY
    [event]
        name=turn refresh
        first_time_only=no
        [store_unit]
            [filter]
                side=$side_number
                type=Dwarvish Cannoner
            [/filter]
            variable=dwarvish_cannoner
        [/store_unit]
        [foreach]
            array=dwarvish_cannoner
            [do]
                {CLEAR_VARIABLE bombard_targets}
                {VARIABLE radius 50}
                [store_unit]
                    [filter]
                        side=1
                        [filter_location]
                            x=$dwarvish_cannoner[$i].x
                            y=$dwarvish_cannoner[$i].y
                            radius=$radius
                        [/filter_location]
                    [/filter]
                    variable=bombard_targets
                [/store_unit]
                {VARIABLE lua_line_of_sight_start_x $dwarvish_cannoner[$i].x}
                {VARIABLE lua_line_of_sight_start_y $dwarvish_cannoner[$i].y}
                {VARIABLE lua_line_of_sight_blocking_terrains X} # TODO filter it better
                {VARIABLE bombard_targets_adjecent_units_count -1}
                [for]
                    start=$($bombard_targets.length - 1)
                    step=-1
                    variable=i2
                    end=0
                    [do]
                        {VARIABLE lua_line_of_sight_end_x $bombard_targets[$i2].x}
                        {VARIABLE lua_line_of_sight_end_y $bombard_targets[$i2].y}
                        [lua]
                            code="wesnoth.dofile '~add-ons/Bandits_from_Brown_Hills/lua/is_line_of_sight_blocked.lua'"
                        [/lua]
                        [if]
                            [variable]
                                name=is_line_of_sight_blocked
                                equals=yes
                            [/variable]
                            [or]
                                [variable]
                                    name=bombard_targets[$i2].id
                                    equals=$last_bombarded_unit_id
                                [/variable]
                            [/or]
                            [then]
                                {CLEAR_VARIABLE bombard_targets[$i2]}
                            [/then]
                            [else]
                                [store_unit]
                                    [filter]
                                        [not]
                                            x,y=$bombard_targets[$i2].x, $bombard_targets[$i2].y
                                        [/not]
                                        [filter_location]
                                            x,y=$bombard_targets[$i2].x, $bombard_targets[$i2].y
                                            radius=1
                                        [/filter_location]
                                        [filter_side]
                                            [enemy_of]
                                                side=$dwarvish_cannoner[$i].side
                                            [/enemy_of]
                                        [/filter_side]
                                    [/filter]
                                    variable=bombard_targets_adjecent_units
                                [/store_unit]
                                [if]
                                    [variable]
                                        name=bombard_targets_adjecent_units_count
                                        less_than=$bombard_targets_adjecent_units.length
                                    [/variable]
                                    [then]
                                        {VARIABLE bombard_targets_adjecent_units_count $bombard_targets_adjecent_units.length}
                                    [/then]
                                    [else]
                                        {CLEAR_VARIABLE bombard_targets[$i2]}
                                    [/else]
                                [/if]
                            [/else]
                        [/if]
                    [/do]
                [/for]
                [if]
                    [variable]
                        name=bombard_targets[0].id
                        not_equals=""
                    [/variable]
                    [then]
                        {VARIABLE last_bombarded_unit_id $bombard_targets[0].id}
                        [if]
                            [have_unit]
                                x,y=$dwarvish_cannoner[$i].x,$dwarvish_cannoner[$i].y
                                [filter_vision]
                                    side=1 
                                [/filter_vision]
                            [/have_unit]
                            [then]
                                [scroll_to]
                                    x,y=$dwarvish_cannoner[$i].x,$dwarvish_cannoner[$i].y
                                [/scroll_to]
                                [modify_unit]
                                    [filter]
                                        x,y=$dwarvish_cannoner[$i].x,$dwarvish_cannoner[$i].y
                                    [/filter]
                                    [status]
                                        cannon_empty=yes
                                    [/status]
                                [/modify_unit]
                                [delay]
                                    time=500
                                    accelerate=no
                                [/delay]
                            [/then]
                        [/if]
                        ###TODO if seen animate the unit, first bombard-> message jareth, hitted unit, if survived and one other unit
                        [modify_unit]
                            [filter]
                                x,y=$dwarvish_cannoner[$i].x,$dwarvish_cannoner[$i].y
                            [/filter]
                            moves=0
                        [/modify_unit]
                        [scroll_to]
                            x,y=$bombard_targets[0].x, $bombard_targets[0].y
                        [/scroll_to]
                        [store_unit]
                            variable=bombard_secondary_targets
                            [filter]
                                [not]
                                    x,y=$bombard_targets[0].x, $bombard_targets[0].y
                                [/not]
                                [filter_location]
                                    x,y=$bombard_targets[0].x, $bombard_targets[0].y
                                    radius=1
                                [/filter_location]
                            [/filter]
                        [/store_unit]
                        [remove_time_area] #attack destruct torches on main tile
                            id="torch_$bombard_targets[0].x|_$bombard_targets[0].y"
                        [/remove_time_area]
                        [terrain]
                            x,y=$bombard_targets[0].x, $bombard_targets[0].y
                            layer=overlay
                            terrain=""
                        [/terrain]
                        [if]
                            [have_location]
                                x,y=$bombard_targets[0].x, $bombard_targets[0].y
                                [not]
                                    terrain=W*^*,S*^*,
                                [/not]
                            [/have_location]
                            [then]
                                [terrain]
                                    x,y=$bombard_targets[0].x, $bombard_targets[0].y
                                    terrain=^Dr
                                    layer=overlay
                                [/terrain]
                            [/then]
                        [/if]
                        [redraw]
                            side=1
                        [/redraw]
                        [sound]
                            name=explosion.mp3
                        [/sound]
                        [lua]
                            code=<<
--making vars , v for shorter code
local v=wml.variables
local kill_list={}
local kill_list_count=0
local primary_medium_damage=20
local secondary_medium_damage=10
local second_unit = wesnoth.units.get(v["dwarvish_cannoner["..v["i"].."].id"])

--random damage generation, replay friendly
wml.fire("set_variable", { name = "primary_raw_damage", rand = string.format("%d..%d", (primary_medium_damage - 10), (primary_medium_damage + 10)) })
for i = 0, (v["bombard_secondary_targets.length"] - 1 ) do
    wml.fire("set_variable", { name = "secondary_raw_damage["..i.."].d", rand = string.format("%d..%d", (secondary_medium_damage - 5), (secondary_medium_damage + 5)) })
end

--explosion
wesnoth.interface.add_hex_overlay(v["bombard_targets[0].x"], v["bombard_targets[0].y"], {halo="projectiles/fireball-impact-[1~16].png~SCALE(200,300), misc/blank-hex.png:[60*16,999999]"})

--defend animation and damage numbers
local animation=wesnoth.units.create_animator()
unit_to_animate=wesnoth.units.get(v["bombard_targets[0].x"], v["bombard_targets[0].y"])
real_damage=math.floor(v["primary_raw_damage"]*(100-wesnoth.units.resistance_against(unit_to_animate, "fire"))/100)
animation:add(unit_to_animate, "defend", "hit",{with_bars = false, primary = second_unit.attacks["cannon"], secondary = second_unit.attacks["cannon"]})
wesnoth.interface.float_label(v["bombard_targets[0].x"], v["bombard_targets[0].y"], "<span color='red'>"..real_damage.."</span>")
if real_damage>=v["bombard_targets[0].hitpoints"] then
    kill_list_count=kill_list_count+1
    kill_list[kill_list_count]=unit_to_animate
end
for i = 0, (v["bombard_secondary_targets.length"] - 1 ) do
    unit_to_animate=wesnoth.units.get(v["bombard_secondary_targets["..i.."].x"], v["bombard_secondary_targets["..i.."].y"])
    real_damage=math.floor(v["secondary_raw_damage["..i.."].d"]*(100-wesnoth.units.resistance_against(unit_to_animate, "fire"))/100)
    animation:add(unit_to_animate, "defend", "hit",{with_bars = false, primary = second_unit.attacks["cannon"], secondary = second_unit.attacks["cannon"]})
    wesnoth.interface.float_label(v["bombard_secondary_targets["..i.."].x"], v["bombard_secondary_targets["..i.."].y"], "<span color='red'>"..real_damage.."</span>")
    if real_damage>=v["bombard_secondary_targets["..i.."].hitpoints"] then
        kill_list_count=kill_list_count+1
        kill_list[kill_list_count]=unit_to_animate
    end
end
animation:run()
animation:clear()

-- deal damage to all units
unit_to_damage=wesnoth.units.get(v["bombard_targets[0].x"], v["bombard_targets[0].y"])
real_damage=math.floor(v["primary_raw_damage"]*(100-wesnoth.units.resistance_against(unit_to_damage, "fire"))/100)
unit_to_damage.hitpoints=unit_to_damage.hitpoints-real_damage
local animation=wesnoth.units.create_animator()
for i = 0, (v["bombard_secondary_targets.length"] - 1 ) do
    unit_to_damage=wesnoth.units.get(v["bombard_secondary_targets["..i.."].x"], v["bombard_secondary_targets["..i.."].y"])
    real_damage=math.floor(v["secondary_raw_damage["..i.."].d"]*(100-wesnoth.units.resistance_against(unit_to_damage, "fire"))/100)
    unit_to_damage.hitpoints=unit_to_damage.hitpoints-real_damage
end

--animate death
for k,unit_to_die in pairs(kill_list) do
    unit_to_die.hitpoints=0
    animation:add(unit_to_die, "death", "hit",{with_bars = false, primary = second_unit.attacks["cannon"], secondary = second_unit.attacks["cannon"]})
end
animation:run()
animation:clear()

--kill units
for k,unit_to_die in pairs(kill_list) do
    wesnoth.wml_actions.kill { id = unit_to_die.id, animate = false, fire_event = true}
end
                            >>
                        [/lua]
                        [delay]
                            time=100
                        [/delay]
                        [delay]
                            time=2000
                        [/delay]
                        [lua]
                            code=<<
local v=wml.variables
wesnoth.interface.remove_hex_overlay(v["bombard_targets[0].x"], v["bombard_targets[0].y"], {halo="projectiles/fireball-impact-[1~16].png~SCALE(200,300), misc/blank-hex.png:[60*16,999999]"})
                            >>
                        [/lua]
                    [/then]
                    [else]
                        {VARIABLE last_bombarded_unit_id 0}
                    [/else]
                [/if]
            [/do]
        [/foreach]
        [foreach]
            array=dwarvish_cannoner
            [do]
                [modify_unit]
                    [filter]
                        x,y=$dwarvish_cannoner[$i].x,$dwarvish_cannoner[$i].y
                    [/filter]
                    [status]
                        cannon_empty=no
                    [/status]
                [/modify_unit]
            [/do]
        [/foreach]
    [/event]
#enddef
#define IMPLEMENT_DWARVEN_MAGIC_ITEM_DROPPABLE
    [switch]
        variable=dwarven_magic_item
        [case]
            value="Boots of speed"
            {GLOBAL__DROPPABLE_BOOTS_OF_SPEED boots_of_speed_dwarven_leader}
        [/case]
        [case]
            value="Breastplate of the mighty"
            {GLOBAL__DROPPABLE_BREASTPLATE_OF_THE_MIGHTY breastplate_of_the_mighty_dwarven_leader}
        [/case]
        [case]
            value="Diadem of intelligence"
            {GLOBAL__DROPPABLE_DIADEM_OF_INTELLIGENCE diadem_of_intelligence_dwarven_leader}
        [/case]
        [case]
            value="Ring of strengt"
            {GLOBAL__DROPPABLE_RING_OF_STRENGT ring_of_strengt_dwarven_leader}
        [/case]
        [case]
            value="Huntsmans hat"
            {GLOBAL__DROPPABLE_HUNTSMANS_HAT huntsmans_hat_dwarven_leader}
        [/case]
        [case]
            value="Ankh"
            {GLOBAL__DROPPABLE_ANKH ankh_dwarven_leader}
        [/case]
    [/switch]
#enddef
#define BLEEDING_OBJECT
        [object]
            silent=yes
            duration=scenario
            id=bleeding_object
            take_only_once=no
            [effect]
                apply_to=image_mod
                replace="CS(50,0,0)"
            [/effect]
            [effect]
                apply_to=movement
                increase="-2"
            [/effect]
            [effect]
                apply_to=attack
                increase_damage="-15%"
            [/effect]
        [/object]
    #enddef
#define IMPLEMENT_ABILITIES_CUSTOM
    [event]
        name=prestart
        id=kamikaze_event
        {VARIABLE attack_was_cancelled no}
    [/event]
    [event]
        name=attack_end
        id=kamikaze_event
        first_time_only=no
        [filter_condition]
            {CANCELLED_ATTACK_FILTER}
        [/filter_condition]
        [filter_attack]
            special_id=kamikaze
        [/filter_attack]
        [kill]
            x,y=$x1,$y1
            animate=no
            fire_event=yes
        [/kill]
    [/event]
    [event]
        name=attacker_hits, attacker_misses, attack
        id=critical_attack
        first_time_only=no
        [filter_attack]
            special_id=critical
        [/filter_attack]
        {VARIABLE_OP critical_random rand "1..100"}
        [if]
            [variable]
                name=critical_random
                less_than=11
            [/variable]
            [then]
                [lua]
                    code=<<
local u_table = wml.variables["unit"]
local variables = wml.get_child(u_table, "variables")
variables.critical = 1
wesnoth.units.erase(u_table.x,u_table.y)
wesnoth.units.to_map(u_table)
>>
                [/lua]
            [/then]
            [else]
                [lua]
                    code=<<
local u_table = wml.variables["unit"]
local variables = wml.get_child(u_table, "variables")
variables.critical = 0
wesnoth.units.erase(u_table.x,u_table.y)
wesnoth.units.to_map(u_table)
>>
                [/lua]
            [/else]
        [/if]
    [/event]
    [event]
        name=defender_hits, defender_misses, attack
        id=critical_defend
        first_time_only=no
        [filter_second_attack]
            special_id=critical
        [/filter_second_attack]
        {VARIABLE_OP critical_random rand "1..100"}
        [if]
            [variable]
                name=critical_random
                less_than=11
            [/variable]
            [then]
                [lua]
                    code=<<
local u_table = wml.variables["second_unit"]
local variables = wml.get_child(u_table, "variables")
variables.critical = 1
wesnoth.units.erase(u_table.x,u_table.y)
wesnoth.units.to_map(u_table)
>>
                [/lua]
            [/then]
            [else]
                [lua]
                    code=<<
local u_table = wml.variables["second_unit"]
local variables = wml.get_child(u_table, "variables")
variables.critical = 0
wesnoth.units.erase(u_table.x,u_table.y)
wesnoth.units.to_map(u_table)
>>
                [/lua]
            [/else]
        [/if]
    [/event]
    [event]
        name=attack_end
        id=critical_attack_end
        first_time_only=no
        [filter_condition]
            {CANCELLED_ATTACK_FILTER}
        [/filter_condition]
        [filter_attack]
            special_id=critical
        [/filter_attack]
        [lua]
            code=<<
local u_table = wml.variables["unit"]
local variables = wml.get_child(u_table, "variables")
variables.critical = 0
wesnoth.units.erase(u_table.x,u_table.y)
wesnoth.units.to_map(u_table)
>>
        [/lua]
    [/event]
    [event]
        name=attack_end
        id=critical_defend_end
        first_time_only=no
        [filter_condition]
            {CANCELLED_ATTACK_FILTER}
        [/filter_condition]
        [filter_second_attack]
            special_id=critical
        [/filter_second_attack]
        [lua]
            code=<<
local u_table = wml.variables["second_unit"]
local variables = wml.get_child(u_table, "variables")
variables.critical = 0
wesnoth.units.erase(u_table.x,u_table.y)
wesnoth.units.to_map(u_table)
>>
        [/lua]
    [/event]
    [event]
        name=attacker hits
        first_time_only=no
        id=corrode_event_attack
        [filter_attack]
            special_id=corrode
        [/filter_attack]
        [filter_second]
            [not]
                ability=corroded
            [/not]
        [/filter_second]
        [modify_unit]
            [filter]
                x=$x2
                y=$y2
            [/filter]
            [effect]
                apply_to=new_ability
                [abilities]
                    {ABILITY_CORRODED}
                [/abilities]
            [/effect]
        [/modify_unit]
        [unit_overlay]
            x,y=$x2,$y2
            ability=corroded
            image="overlays/corrode.png"
        [/unit_overlay]
    [/event]
    [event]
        name=defender hits
        first_time_only=no
        id=corrode_event_defend
        [filter_second_attack]
            special_id=corrode
        [/filter_second_attack]
        [filter]
            [not]
                ability=corroded
            [/not]
        [/filter]
        [modify_unit]
            [filter]
                x=$x1
                y=$y1
            [/filter]
            [effect]
                apply_to=new_ability
                [abilities]
                    {ABILITY_CORRODED}
                [/abilities]
            [/effect]
        [/modify_unit]
        [unit_overlay]
            x,y=$x1,$y1
            ability=corroded
            image="overlays/corrode.png"
        [/unit_overlay]
    [/event]
    [event]
        name=side turn
        first_time_only=no
        id=corrode_event_village
        [store_locations]
            [filter]
                side=$side_number
                ability=corroded
            [/filter]
            terrain=*^V*
            variable=uninjure_by_village_on
            mode=append
        [/store_locations]
        {VARIABLE i 0}
        [while]
            [variable]
                name=i
                less_than=$uninjure_by_village_on.length
            [/variable]
            [do]
                [store_unit]
                    [filter]
                        x=$uninjure_by_village_on[$i].x
                        y=$uninjure_by_village_on[$i].y
                    [/filter]
                    variable=uninjure_by_healing_on
                    mode=append
                [/store_unit]
                [set_variable]
                    name=i
                    add=1
                [/set_variable]
            [/do]
        [/while]
        {CLEAR_VARIABLE i}
        {VARIABLE j 0}
        [while]
            [variable]
                name=j
                less_than=$uninjure_by_healing_on.length
            [/variable]
            [do]
                [unstore_unit]
                    variable=uninjure_by_healing_on[$j]
                [/unstore_unit]
                [modify_unit]
                    [filter]
                        x,y=$uninjure_by_healing_on[$j].x,$uninjure_by_healing_on[$j].y
                    [/filter]
                    [effect]
                        apply_to=remove_ability
                        [abilities]
                            {ABILITY_CORRODED}
                        [/abilities]
                    [/effect]
                [/modify_unit]
                [remove_unit_overlay]
                    x,y=$uninjure_by_healing_on[$j].x,$uninjure_by_healing_on[$j].y
                    image="overlays/corrode.png"
                [/remove_unit_overlay]
                [animate_unit]
                    flag=healed
                    [filter]
                        x,y=$uninjure_by_healing_on[$j].x,$uninjure_by_healing_on[$j].y
                    [/filter]
                    text= _ "armor repaired"
                    red=200
                    green=0 ###TODO # TODO #TODO
                    blue=200
                [/animate_unit]
                [set_variable]
                    name=j
                    add=1
                [/set_variable]
            [/do]
        [/while]
        {CLEAR_VARIABLE j}
        {CLEAR_VARIABLE uninjure_by_healing_on}
        {CLEAR_VARIABLE uninjure_by_village_on}
    [/event]
    [event]
        name=pre advance
        first_time_only=no
        id=corrode_event_advance
        [filter]
            ability=corroded
        [/filter]
        [modify_unit]
            [filter]
                x,y=$unit.x,$unit.y
            [/filter]
            [effect]
                apply_to=remove_ability
                [abilities]
                    {ABILITY_CORRODED}
                [/abilities]
            [/effect]
        [/modify_unit]
        [remove_unit_overlay]
            x,y=$unit.x,$unit.y
            image="overlays/corrode.png"
        [/remove_unit_overlay]
    [/event]
    [event]
        name=attack end
        first_time_only=no
        [filter_condition]
            {CANCELLED_ATTACK_FILTER}
        [/filter_condition]
        [filter_attack]
            special_id=hit_and_run
        [/filter_attack]
        {UNIT_SKIRIMSHER x,y=$x1,$y1}
    [/event]
    [event]
        name=attack
        first_time_only=no
        [filter_condition]
            {CANCELLED_ATTACK_FILTER}
        [/filter_condition]
        [filter]
            ability=endurance
        [/filter]
        [lua]
            code=<<
local u_table = wml.variables["unit"]
local variables = wml.get_child(u_table, "variables")
if u_table.hitpoints == u_table.max_hitpoints then
    variables.endurance = true
else
    variables.endurance = false
end
wesnoth.units.erase(u_table.x,u_table.y)
wesnoth.units.to_map(u_table)
>>
        [/lua]
    [/event]
    [event]
        name=attack
        first_time_only=no
        [filter_condition]
            {CANCELLED_ATTACK_FILTER}
        [/filter_condition]
        [filter_second]
            ability=endurance
        [/filter_second]
        [lua]
            code=<<
local u_table = wml.variables["second_unit"]
local variables = wml.get_child(u_table, "variables")
if u_table.hitpoints == u_table.max_hitpoints then
    variables.endurance = true
else
    variables.endurance = false
end
wesnoth.units.erase(u_table.x,u_table.y)
wesnoth.units.to_map(u_table)
>>
        [/lua]
    [/event]
    [event]
        name=defender_hits
        first_time_only=no
        [filter]
            ability=endurance
        [/filter]
        [lua]
            code=<<
local unit = wesnoth.units.get(wesnoth.current.event_context.x1, wesnoth.current.event_context.y1)
if unit.hitpoints <= 0 and unit.variables.endurance then unit.hitpoints = 1 end
>>
        [/lua]
    [/event]
    [event]
        name=attacker_hits
        first_time_only=no
        [filter_second]
            ability=endurance
        [/filter_second]
        [lua]
            code=<<
local unit = wesnoth.units.get(wesnoth.current.event_context.x2, wesnoth.current.event_context.y2)
if unit.hitpoints <= 0 and unit.variables.endurance then unit.hitpoints = 1 end
>>
        [/lua]
    [/event]
    [event]
        name=pre attack
        first_time_only=no
        priority=1000
        [filter_condition]
            [not]
                [variable]
                    name=living_shield.length
                    greater_than=0
                [/variable]
            [/not]
        [/filter_condition]
        [filter]
            [filter_adjacent]
                is_enemy=yes
                ability=living_shield
            [/filter_adjacent]
        [/filter]
        [filter_second]
            [filter_adjacent]
                is_enemy=no
                ability=living_shield
            [/filter_adjacent]
        [/filter_second]
        [store_unit]
            [filter]
                ability=living_shield
                [filter_adjacent]
                    x,y=$unit.x,$unit.y
                    is_enemy=yes
                [/filter_adjacent]
                [and]
                    [filter_adjacent]
                        x,y=$second_unit.x,$second_unit.y
                        is_enemy=no
                        [and]
                            formula="level > other.level"
                            [or]
                                formula="level = other.level"
                                [not]
                                    ability=living_shield
                                [/not]
                            [/or]
                        [/and]
                    [/filter_adjacent]
                [/and]
            [/filter]
            variable=living_shield
        [/store_unit]
        [if]
            [variable]
                name=living_shield.length
                greater_than=0
            [/variable]
            [then]
                [lua]
                    code=<<
local i = 0
while wml.variables["unit[0].attack["..i.."]"] ~= nil and BfBH.table.deep_compare(wml.variables["unit[0].attack["..i.."]"], wml.variables["weapon"]) == false do
    i = i + 1
end
wml.variables["attacking_weapon_index"] = i
attacker = wesnoth.units.get(wml.variables["unit[0].id"])
defender = wesnoth.units.get(wml.variables["living_shield[0].id"])
local _,_,_,defender_stats = wesnoth.simulate_combat(attacker, i + 1, defender)
wml.variables["defending_weapon_index"] = defender_stats.attack_num
>>
                [/lua]
                [cancel_action]
                [/cancel_action]
                [do_command]
                    [attack]
                        [source]
                            x,y=$x1,$y1
                        [/source]
                        [destination]
                            x,y=$living_shield.x,$living_shield.y
                        [/destination]
                        weapon=$attacking_weapon_index
                        defender_weapon=$defending_weapon_index
                    [/attack]
                [/do_command]
                {VARIABLE attack_was_cancelled yes}
            [/then]
        [/if]
        {CLEAR_VARIABLE living_shield,attacking_weapon_index,defending_weapon_index}
    [/event]
    [event]
        priority=-1000
        name=attack end
        first_time_only=no
        {VARIABLE attack_was_cancelled no}
    [/event]
    [event]
        name=attack end
        first_time_only=no
        [filter_condition]
            {CANCELLED_ATTACK_FILTER}
        [/filter_condition]
        [filter]
            ability=adaptive_armor
        [/filter]
        [lua]
            code=<<
local u_table = wml.variables["unit"]
local variables = wml.get_child(u_table, "variables")
variables.adaptive_armor = wml.variables["second_weapon"].type
wesnoth.units.erase(u_table.x,u_table.y)
wesnoth.units.to_map(u_table)
>>
        [/lua]
    [/event]
    [event]
        name=attack end
        first_time_only=no
        [filter_attack]
            special_id=mark
        [/filter_attack]
        [lua]
            code=<<
local u_table = wml.variables["unit"]
local variables = wml.get_child(u_table, "variables")
variables.marked_unit = wml.variables["second_unit"].id
wesnoth.units.erase(u_table.x,u_table.y)
wesnoth.units.to_map(u_table)
>>
        [/lua]
    [/event]
    [event]
        name=attack end
        first_time_only=no
        priority=900
        [filter_condition]
            {CANCELLED_ATTACK_FILTER}
        [/filter_condition]
        [filter]
            ability=disengage
            [not]
                [filter_wml]
                    moves=$this_unit.max_moves
                [/filter_wml]
            [/not]
        [/filter]
        {VARIABLE unit.moves 0}
        [unstore_unit]
            variable=unit
            find_vacant=no
        [/unstore_unit]
    [/event]
    [event]
        id=ability_desperate_dodge_event_1
        name=attack, attacker_misses, attack_end
        first_time_only=no
        [filter_condition]
            {CANCELLED_ATTACK_FILTER}
        [/filter_condition]
        [filter_second]
            ability=desperate_dodge
        [/filter_second]
        [lua]
            code=<<
local u_table = wml.variables["unit"]
local variables = wml.get_child(u_table, "variables")
variables.desperate_dodge = 0
wesnoth.units.erase(u_table.x,u_table.y)
wesnoth.units.to_map(u_table)
>>
        [/lua]
    [/event]
    [event]
        id=ability_desperate_dodge_event_2
        name=attack, defender_misses, attack_end
        first_time_only=no
        [filter_condition]
            {CANCELLED_ATTACK_FILTER}
        [/filter_condition]
        [filter]
            ability=desperate_dodge
        [/filter]
        [lua]
            code=<<
local u_table = wml.variables["second_unit"]
local variables = wml.get_child(u_table, "variables")
variables.desperate_dodge = 0
wesnoth.units.erase(u_table.x,u_table.y)
wesnoth.units.to_map(u_table)
>>
        [/lua]
    [/event]
    [event]
        id=ability_desperate_dodge_event_3
        name=attacker_hits
        first_time_only=no
        [filter_second]
            ability=desperate_dodge
        [/filter_second]
        [lua]
            code=<<
local u_table = wml.variables["unit"]
local variables = wml.get_child(u_table, "variables")
variables.desperate_dodge = (20 + variables.desperate_dodge)
wesnoth.units.erase(u_table.x,u_table.y)
wesnoth.units.to_map(u_table)
>>
        [/lua]
    [/event]
    [event]
        id=ability_desperate_dodge_event_4
        name=defender_hits
        first_time_only=no
        [filter]
            ability=desperate_dodge
        [/filter]
        [lua]
            code=<<
local u_table = wml.variables["second_unit"]
local variables = wml.get_child(u_table, "variables")
variables.desperate_dodge = (20 + variables.desperate_dodge)
wesnoth.units.erase(u_table.x,u_table.y)
wesnoth.units.to_map(u_table)
>>
        [/lua]
    [/event]
    [event]
        name=die
        priority=-1000
        first_time_only=no
        [filter]
            [not]
                [filter_location]
                    terrain=*^V*
                [/filter_location]
            [/not]
            [not]
                formula="self.undead"
            [/not]
        [/filter]
        [store_unit]
            [filter]
                x,y=$x1,$y1
            [/filter]
            variable=reanimated_unit
        [/store_unit]
        [filter_second_attack]
            special_id=plague
        [/filter_second_attack]
        [kill]
            x,y=$x1,$y1
        [/kill]
        [unit]
            type=BfBH Walking Corpse
            x,y=$x1,$y1
            side=$second_unit.side
            variation=$reanimated_unit.undead_variation
            animate=yes
            attacks_left=0
            moves=0
            [variables]
                reanimated_unit_type=$reanimated_unit.type
            [/variables]
        [/unit]
    [/event]
    [event]
        name=unit_placed
        first_time_only=no
        [filter]
            type=BfBH Walking Corpse, BfBH Soulless
        [/filter]
        [modify_unit] #just so one can see the ability in the unit_type and also checks if unit got this already
            [filter]
                x,y=$x1,$y1
            [/filter]
            [object]
                id=reanimation_power_gained
                take_only_once=no
                silent=yes
                [effect]
                    apply_to=remove_ability
                    [experimental_filter_ability]
                        [reanimated]
                        [/reanimated]
                    [/experimental_filter_ability]
                [/effect]
            [/object]
        [/modify_unit]
        [lua]
            [args]
                [abilities]
                    {ABILITY_LONE_WOLF}
                    {ABILITY_MARK}
                    {ABILITY_FLEE}
                    {ABILITY_DISENGAGE}
                [/abilities]
                [specials]
                    {WEAPON_SPECIAL_CRIPPLING_BLOW}
                    {WEAPON_SPECIAL_MARK}
                [/specials]
            [/args]
            code = <<
local abilities = {}
local specials= {}
local ecx = wesnoth.current.event_context
local unit = wesnoth.units.get(ecx.x1, ecx.y1)
local args = wml.tovconfig(...)
local abilities_vconfig = wml.tovconfig(wml.get_child(args, "abilities"))
local specials_vconfig = wml.tovconfig(wml.get_child(args, "specials"))
i = 1
while abilities_vconfig[i] do
    abilities[abilities_vconfig[i][2].id] = {
        id = abilities_vconfig[i][2].id,
        wml.tag.effect {
            apply_to = "new_ability",
            wml.tag.abilities {
                wml.tag[abilities_vconfig[i][1]](abilities_vconfig[i][2])
            }
        }
    }
    i = i + 1
end
i = 1
while specials_vconfig[i] do
    specials[specials_vconfig[i][2].id] = {
        id = specials_vconfig[i][2].id,
        wml.tag.effect {
            apply_to = "attack",
            wml.tag.set_specials {
                mode = "append",
                wml.tag[specials_vconfig[i][1]](specials_vconfig[i][2])
            }
        }
    }
    i = i + 1
end
local base_unit_functions = {
    [""] = function() 
        std_print("No base unit found, this ability needs a little bit of extra attantion for evey unit tree.")
    end,
    ["BfBH Footpad"] = function() 
        unit:add_modification("object", abilities["flee"]) 
    end,
    ["BfBH Thug"] = function()
        unit:add_modification("object", specials["crippling_blow"])
    end,
    ["BfBH Trapper"] = function() 
        unit:add_modification("object", abilities["mark"]) 
        unit:add_modification("object", specials["mark"])
    end
}
local base_units = {"BfBH Footpad", "BfBH Thug", "BfBH Poacher", "BfBH Goblin Spearman", "BfBH Spearman"}
local move_down = {}
for k,unit in pairs(wesnoth.unit_types) do
	for i = 1, #unit.advances_to do
        move_down[unit.advances_to[i]] = move_down[unit.advances_to[i]] or {}
        table.insert(move_down[unit.advances_to[i]], k)
    end
end
function get_base_units_bfs(start_unit_type, base_units)
    if start_unit_type == nil or start_unit_type == "" then
        return {}
    end
    local queue = {start_unit_type}
    local visited = {[start_unit_type] = true}
    local found_base_units = {}
    local base_units_set = {}
    for _, unit in ipairs(base_units) do
        base_units_set[unit] = true
    end
    while #queue > 0 do
        local current_type = table.remove(queue, 1)
        if base_units_set[current_type] then
            table.insert(found_base_units, current_type)
        end
        local lower_units = move_down[current_type] or {}
        for _, unit_type in ipairs(lower_units) do
            if not visited[unit_type] then
                visited[unit_type] = true
                table.insert(queue, unit_type)
            end
        end
    end
    if #found_base_units == 0 then
        local queue = {start_unit_type}
        local visited = {[start_unit_type] = true}
        while #queue > 0 do
            local current_type = table.remove(queue, 1)
            if base_units_set[current_type] then
                table.insert(found_base_units, current_type)
            end
            local lower_units = wesnoth.unit_types[current_type].advances_to or {}
            for _, unit_type in ipairs(lower_units) do
                if not visited[unit_type] then
                    visited[unit_type] = true
                    table.insert(queue, unit_type)
                end
            end
        end
    end
    return found_base_units
end
function get_random_element(table)
    if #table == 0 then
        return ""
    end
    return table[mathx.random(#table)]
end

base_unit_functions[get_random_element(get_base_units_bfs(unit.variables.reanimated_unit_type, base_units))]()

-- BfBH.table.std_print(move_down["Ogre"])
-- BfBH.table.std_print(move_down["Bowman"])
-- BfBH.table.std_print(get_base_units_bfs("BfBH Fugitive", base_units))
-- BfBH.table.std_print(get_base_units_bfs("BfBH Peasant", base_units))
-- BfBH.table.std_print(get_base_units_bfs("BfBH Footpad", base_units))
-- BfBH.table.std_print(get_base_units_bfs("BfBH Huntsman", base_units))
-- BfBH.table.std_print(get_base_units_bfs("BfBH Ranger", base_units))



--unit:add_modification("object", abilities["flee"])
--unit:add_modification("object", abilities["mark"])
--unit:add_modification("object", specials["mark"])
--unit:add_modification("object", specials["crippling_blow"])
            >>
        [/lua]
    [/event]
    [event]
        id=ability_flee_event_1
        name=attack
        first_time_only=no
        [filter]
            ability=flee
        [/filter]
        [lua]
            code=<<
local attacker= wesnoth.units.get(wml.variables["unit.id"])
local defender= wesnoth.units.get(wml.variables["second_unit.id"])
local u_table = wml.variables["unit"]
local variables = wml.get_child(u_table, "variables")
local i = 0
std_print(wml.variables["weapon.name"])
while wml.variables["unit[0].attack["..i.."].name"] ~= wml.variables["weapon.name"] do
    std_print(wml.variables["unit[0].attack["..i.."].name"])
    i = i + 1
end
local attacking_weapon_index = i + 1
std_print(i)
local _, _, attacker_stats, defender_stats =wesnoth.simulate_combat(attacker,attacking_weapon_index, defender)


for key, value in pairs(attacker_stats) do --do I need those?
    wml.variables["attacker_stats."..key] = tonumber(value) or tostring(value)
end
for key, value in pairs(defender_stats) do
    wml.variables["defender_stats."..key] = tonumber(value) or tostring(value)
end

if defender_stats.damage >= u_table.hitpoints then
    std_print("I can die next strike")
    variables.flee = true
else
    std_print("I will live 100%")
    variables.flee = false
end
wesnoth.units.erase(u_table.x,u_table.y)
wesnoth.units.to_map(u_table)
>>
        [/lua]
    [/event]
    [event]
        id=weapon_special_ink_event_1
        name=attacker_hits
        first_time_only=no
        [filter_second]
            [not]
                [filter_wml]
                    [variables]
                        inked=yes
                    [/variables]
                [/filter_wml]
            [/not]
        [/filter_second]
        [filter_attack]
            special_id=ink
        [/filter_attack]
        [lua]
            code=<<
local u_table = wml.variables["second_unit"]
local variables = wml.get_child(u_table, "variables")
variables.inked = "yes"
wesnoth.units.erase(u_table.x,u_table.y)
wesnoth.units.to_map(u_table)
>>
        [/lua]
        [modify_unit]
            [filter]
                x,y=$x2,$y2
            [/filter]
            [object]
                id=inked
                silent=yes
                [effect]
                    apply_to=new_ability
                    [abilities]
                        {ABILITY_INKED}
                    [/abilities]
                [/effect]
            [/object]
        [/modify_unit]
    [/event]
    [event]
        id=weapon_special_ink_event_2
        name=defender_hits
        first_time_only=no
        [filter]
            [not]
                [filter_wml]
                    [variables]
                        inked=yes
                    [/variables]
                [/filter_wml]
            [/not]
        [/filter]
        [filter_second_attack]
            special_id=ink
        [/filter_second_attack]
        [lua]
            code=<<
local u_table = wml.variables["unit"]
local variables = wml.get_child(u_table, "variables")
variables.inked = "yes"
wesnoth.units.erase(u_table.x,u_table.y)
wesnoth.units.to_map(u_table)
>>
        [/lua]
        [modify_unit]
            [filter]
                x,y=$x1,$y1
            [/filter]
            [object]
                id=inked
                silent=yes
                [effect]
                    apply_to=new_ability
                    [abilities]
                        {ABILITY_INKED}
                    [/abilities]
                [/effect]
            [/object]
        [/modify_unit]
    [/event]
    [event]
        id=weapon_special_ink_event_3
        name=attack_end
        first_time_only=no
        [filter_condition]
            {CANCELLED_ATTACK_FILTER}
        [/filter_condition]
        [filter_second]
            [not]
                [filter_wml]
                    [variables]
                        inked=yes
                    [/variables]
                [/filter_wml]
            [/not]
        [/filter_second]
        [lua]
            code=<<
local u_table = wml.variables["second_unit"]
local variables = wml.get_child(u_table, "variables")
variables.inked = "no"
wesnoth.units.erase(u_table.x,u_table.y)
wesnoth.units.to_map(u_table)
>>
        [/lua]
        [remove_object]
            x,y=$x2,$y2
            object_id=inked
        [/remove_object]
    [/event]
    [event]
        id=weapon_special_ink_event_4
        name=attack_end
        first_time_only=no
        [filter_condition]
            {CANCELLED_ATTACK_FILTER}
        [/filter_condition]
        [filter]
            [filter_wml]
                [variables]
                    inked=yes
                [/variables]
            [/filter_wml]
        [/filter]
        [lua]
            code=<<
local u_table = wml.variables["unit"]
local variables = wml.get_child(u_table, "variables")
variables.inked = "no"
wesnoth.units.erase(u_table.x,u_table.y)
wesnoth.units.to_map(u_table)
>>
        [/lua]
        [remove_object]
            x,y=$x1,$y1
            object_id=inked
        [/remove_object]
    [/event]
    [event]
        id=ability_scavenger_event
        name=die
        first_time_only=no
        [filter]
            [not]
                [filter_wml]
                    [status]
                        undrainable="yes"
                    [/status]
                [/filter_wml]
            [/not]
        [/filter]
        [filter_second]
            ability=scavenger
        [/filter_second]
        [heal_unit]
            [filter]
                x,y=$x2,$y2
            [/filter]
            amount=$(floor($unit.max_hitpoints / 4))
            animate=yes
            restore_statuses=no
        [/heal_unit]
    [/event]
    [event] #TODO make it status, give it icon
        id=ability_death_shriek_inflict
        name=die
        first_time_only=no
        [filter]
            ability=death_shriek
        [/filter]
        [modify_unit]
            [filter]
                [filter_side]
                    [enemy_of]
                        side=$unit.side
                    [/enemy_of]
                [/filter_side]
                [filter_location]
                    x,y=$x1,$y1
                    radius=2
                [/filter_location]
            [/filter]
            [object]
                id=ringing_ears
                take_only_once=no
                silent=yes
                duration=scenario
                [effect]
                    apply_to=new_ability
                    [abilities]
                        {ABILITY_RINGING_EARS}
                    [/abilities]
                [/effect]
            [/object]
            [variables]
                ringing_ears_remove_turn="$(if($this_unit.side = $side_number,$( $turn_number + 1 ),$turn_number))"
            [/variables]
        [/modify_unit]
    [/event]
    [event]
        id=ability_death_shriek_remove
        name=side turn end
        first_time_only=no
        [remove_object]
            side=$side_number
            #race="$(if($this_unit.variables.ringing_ears_remove_turn <= $turn_number,1,0))"
            #  [filter_wml]
            #      [variables]
            #          ringing_ears_remove_turn=0 - 10
            #      [/variables]
            #  [/filter_wml]
            #formula="debug_print(self.wml_vars.ringing_ears_remove_turn) <= debug_print(turn_number)"
            lua_function=BfBH.filter.death_shriek
            object_id=ringing_ears
        [/remove_object]
    [/event]
    [event]
        id=ability_storming_event
        name=die
        first_time_only=no
        [filter]
            [filter_location]
                terrain=*^V*,C*^*,K*^*
            [/filter_location]
        [/filter]
        [filter_second]
            ability=storming
        [/filter_second]
        [kill]
            id=$unit.id
            animate=no
            [secondary_unit]
                id=$second_unit.id
            [/secondary_unit] 
        [/kill]
        [lua]
            code=<<
unit = wesnoth.units.get(wml.variables["second_unit[0].id"])
if wml.variables["unit[0].level"] == 0 then
    unit.experience = wesnoth.game_config.kill_experience * 0.5
else
    unit.experience = unit.experience +(wml.variables["unit[0].level"] * wesnoth.game_config.kill_experience)
end>>
        [/lua]
        {MOVE_UNIT (x,y = $x2,$y2) $x1 $y1}
    [/event]
    [event] #TODO finish slow remove and fast remove events!, deal damage only after healing in villages
        name=attacker hits
        first_time_only=no
        [filter_second]
            [not]
                [filter_wml]
                    [status]
                        not_living="yes"
                    [/status]
                [/filter_wml]
            [/not]
        [/filter_second]
        [filter_attack]
            special_id=bleed
        [/filter_attack]
        [lua]
            code=<<
local u_table = wml.variables["second_unit"]
local variables = wml.get_child(u_table, "variables")
if variables.bleed == nil or variables.bleed == "" then
variables.bleed = 1
else
variables.bleed = (variables.bleed + 1)
end
variables.bleed_inflicted= wml.variables["unit"].id
wesnoth.units.erase(u_table.x,u_table.y)
wesnoth.units.to_map(u_table)
wml.variables["second_unit"] = u_table
-- wesnoth.interface.float_label(u_table.x, u_table.y, "Bleeding: " .. variables.bleed)
>>
        [/lua]
        [if]
            [have_unit]
                id=$second_unit.id
                [not]
                    [filter_wml]
                        [status]
                            bleeding=yes
                        [/status]
                    [/filter_wml]
                [/not]
            [/have_unit]
            [then]
                {VARIABLE second_unit.status.bleeding yes}
                [unstore_unit]
                    variable=second_unit
                    find_vacant=no
                    text=_ "bleeding"
                    red,green,blue=255,0,0
                [/unstore_unit]
                [modify_unit]
                    [filter]
                        id=$second_unit.id
                    [/filter]
                    {BLEEDING_OBJECT}
                [/modify_unit]
            [/then]
        [/if]
    [/event]
    [event]
        name=defender hits
        id=bleed_event_2
        first_time_only=no
        [filter]
            [not]
                [filter_wml]
                    [status]
                        not_living="yes"
                    [/status]
                [/filter_wml]
            [/not]
        [/filter]
        [filter_second_attack]
            special_id=bleed
        [/filter_second_attack]
        [lua]
            code=<<
local u_table = wml.variables["unit"]
local variables = wml.get_child(u_table, "variables")
if variables.bleed == nil or variables.bleed == "" then
    variables.bleed = 1
else
    variables.bleed = (variables.bleed + 1)
end
variables.bleed_inflicted= wml.variables["second_unit"].id
wesnoth.units.erase(u_table.x,u_table.y)
wesnoth.units.to_map(u_table)
wml.variables["second_unit"] = u_table
>>
        [/lua]
        [if]
            [have_unit]
                id=$unit.id
                [not]
                    [filter_wml]
                        [status]
                            bleeding=yes
                        [/status]
                    [/filter_wml]
                [/not]
            [/have_unit]
            [then]
                {VARIABLE unit.status.bleeding yes}
                [unstore_unit]
                    variable=unit
                    find_vacant=no
                    text=_ "bleeding"
                    red,green,blue=255,0,0
                [/unstore_unit]
                [modify_unit]
                    [filter]
                        id=$unit.id
                    [/filter]
                    {BLEEDING_OBJECT}
                [/modify_unit]
            [/then]
        [/if]
    [/event]
    [event]
        name=side turn
        id=bleed_event_3
        first_time_only=no
        [store_unit]
            [filter]
                side=$side_number
                [filter_wml]
                    [status]
                        bleeding="yes"
                    [/status]
                [/filter_wml]
            [/filter]
            variable=bleeding_units
        [/store_unit]
        [for]
            start=$($bleeding_units.length - 1)
            step=-1
            variable=i
            end=0
            [do]
                [harm_unit]
                    [filter]
                        x,y=$bleeding_units[$i].x,$bleeding_units[$i].y
                    [/filter]
                    [filter_second]
                        id=$bleeding_units[$i].variables.bleed_inflicted
                    [/filter_second]
                    amount=$bleeding_units[$i].variables.bleed
                    fire_event=yes
                    animate=defender
                    kill=yes
                    experience=kill
                [/harm_unit]
#                  [lua]
#                      code=<<
#  local u_table = wml.variables["unit"]
#  local variables = wml.get_child(u_table, "variables")
#  if variables.bleed == nil or variables.bleed == "" then
#      variables.bleed = 1
#  else
#      variables.bleed = (variables.bleed + 1)
#  end
#  variables.bleed_inflicted= wml.variables["second_unit"].id
#  wesnoth.units.erase(u_table.x,u_table.y)
#  wesnoth.units.to_map(u_table)
#  >>
#                  [/lua]
            [/do]
        [/for]
        {CLEAR_VARIABLE bleeding_units}
    [/event]
    [event]
        name=advance
        id=bleed_event_4
        first_time_only=no
    
        [filter]
            status=bleeding
        [/filter]
    
        {VARIABLE unit.status.bleeding no}
    
        [unstore_unit]
            variable=unit
            find_vacant=no
            advance=no
        [/unstore_unit]
    
        [remove_object]
            x,y=$unit.x,$unit.y
            object_id=bleeding_object
        [/remove_object]
    [/event]
    
    [event]
        name=victory
        id=bleed_event_5
    
        [remove_object]
            object_id=bleeding_object
            status=bleeding
        [/remove_object]
    
        [modify_unit]
            [filter]
                status=bleeding
            [/filter]
    
            [status]
                bleeding=no
            [/status]
        [/modify_unit]
    [/event]
    
    [event]
        name=side turn
        id=bleed_event_6
        first_time_only=no
    
        [remove_object]
            object_id=bleeding_object
            side=$side_number
            status=bleeding
            [and]
                [filter_location]
                    terrain=*^V*
                [/filter_location]
                [or]
                    ability_type_active=regenerate
                [/or]
                [or]
                    [filter_adjacent]
                        is_enemy=no
                        [and]
                            ability_type=heals
                        [/and]
                    [/filter_adjacent]
                [/or]
            [/and]
        [/remove_object]
    
        [store_unit]
            [filter]
                side=$side_number
                status=bleeding
                [and]
                    [filter_location]
                        terrain=*^V*
                    [/filter_location]
                    [or]
                        ability_type_active=regenerate
                    [/or]
                    [or]
                        [filter_adjacent]
                            is_enemy=no
                            [and]
                                ability_type=heals
                            [/and]
                        [/filter_adjacent]
                    [/or]
                [/and]
            [/filter]
            variable=bleeding_units
        [/store_unit]
    
        [foreach]
            array=bleeding_units
            [do]
                {VARIABLE this_item.status.bleeding no}
                [unstore_unit]
                    variable=this_item
                    find_vacant=no
                [/unstore_unit]
                [heal_unit]
                    [filter]
                        x,y=$this_item.x,$this_item.y
                    [/filter]
                    amount=0
                    moves=full
                    animate=no
                    restore_statuses=no
                [/heal_unit]
            [/do]
        [/foreach]
        {CLEAR_VARIABLE bleeding_units}
    [/event]



    [event]
        name=attacker_hits
        first_time_only=no
        [filter_attack]
            special_id=crippling_blow
        [/filter_attack]
        [lua]
               code=<<
local u_table = wml.variables["second_unit"]
local variables = wml.get_child(u_table, "variables")
if variables.crippled == nil or variables.crippled == "" then
    variables.crippled = 5
else
    variables.crippled = (variables.crippled + 5)
end
if variables.crippled > 100 then
    variables.crippled = 100
end
wesnoth.units.erase(u_table.x,u_table.y)
wesnoth.units.to_map(u_table)
>>
        [/lua]
        [if]
            [have_unit]
                x,y=$x2,$y2
                status=crippled
            [/have_unit]
            [then]
            [/then]
            [else]
                [modify_unit]
                    [filter]
                        x,y=$x2,$y2
                    [/filter]
                    [status]
                        crippled=yes
                    [/status]
                    [object]
                        id=crippled
                        silent=yes
                        [effect]
                            apply_to=new_ability
                            [abilities]
                                [damage]
                                    id=crippled
                                    multiply="((100.0 - self.wml_vars.crippled) / 100.0)"
                                [/damage]
                            [/abilities]
                        [/effect]
                    [/object]
                [/modify_unit]
            [/else]
        [/if]
    [/event]
    [event]
        name=defender hits
        first_time_only=no
        [filter_second_attack]
            special_id=crippling_blow
        [/filter_second_attack]
        [lua]
               code=<<
local u_table = wml.variables["unit"]
local variables = wml.get_child(u_table, "variables")
if variables.crippled == nil or variables.crippled == "" then
    variables.crippled = 5
else
    variables.crippled = (variables.crippled + 5)
end
if variables.crippled > 100 then
    variables.crippled = 100
end
wesnoth.units.erase(u_table.x,u_table.y)
wesnoth.units.to_map(u_table)
>>
        [/lua]
        [if]
            [have_unit]
                x,y=$x1,$y1
                status=crippled
            [/have_unit]
            [then]
            [/then]
            [else]
                [modify_unit]
                    [filter]
                        x,y=$x1,$y1
                    [/filter]
                    [status]
                        crippled=yes
                    [/status]
                    [object]
                        id=crippled
                        silent=yes
                        [effect]
                            apply_to=new_ability
                            [abilities]
                                [damage]
                                    id=crippled
                                    multiply="((100.0 - self.wml_vars.crippled) / 100.0)"
                                [/damage]
                            [/abilities]
                        [/effect]
                    [/object]
                [/modify_unit]
            [/else]
        [/if]
    [/event]
    [event]
        name=post advance
        [if]
            [have_unit]
                x,y=$x1,$y1
                status=crippled
            [/have_unit]
            [then]
                [modify_unit]
                    [filter]
                        x,y=$x1,$y1
                    [/filter]
                    [status]
                        crippled=no
                    [/status]
                [/modify_unit]
                [remove_object]
                    x,y=$x1,$y1
                    object_id=crippled
                [/remove_object]
                [lua]
                    code=<<
local u_table = wml.variables["unit"]
local variables = wml.get_child(u_table, "variables")
variables.crippled = 0
wesnoth.units.erase(u_table.x,u_table.y)
wesnoth.units.to_map(u_table)
>>
                [/lua]
            [/then]
        [/if]
    [/event]
    [event]
        name=turn refresh
        first_time_only=no
        [modify_unit]
            [filter]
                side=$side_number
                status=crippled
                [and]
                    [filter_location]
                        terrain=*^V* 
                    [/filter_location]
                    [or]
                        [experimental_filter_ability]
                            value=8
                            id=regenerates
                        [/experimental_filter_ability]
                    [/or]
                [/and]
                [or]
                    status=crippled
                    [filter_adjacent]
                        side=$side_number
                        is_enemy=no
                        [experimental_filter_ability]
                            value=8
                            id=healing
                            affect_allies=yes
                        [/experimental_filter_ability]
                    [/filter_adjacent]
                [/or]
            [/filter]
            [set_variable]
                name=crippled
                sub=20
            [/set_variable]
        [/modify_unit]
        [remove_object]
            status=crippled
            formula="(self.wml_vars.crippled <= 0)"
            object_id=crippled
        [/remove_object]
        [modify_unit]
            [filter]
                status=crippled
                formula="(self.wml_vars.crippled <= 0)"
            [/filter]
            [set_variable]
                name=crippled
                value=0
            [/set_variable]
            [status]
                crippled=no
            [/status]
        [/modify_unit]
    [/event]
    [event]
        name=attack end
        first_time_only=no
        [filter_condition]
            {CANCELLED_ATTACK_FILTER}
        [/filter_condition]
        [filter_attack]
            special_id=limited_uses
        [/filter_attack]
        [lua]
            code="wesnoth.dofile '~add-ons/Bandits_from_Brown_Hills/lua/special_limited_uses.lua'"
        [/lua]
    [/event]
    [event] #TODO FOR FUTURE ME!!!! UPGRADE THIS
        name=unit_placed
        first_time_only=no
        [filter]
            [not]
                [filter_wml]
                    [modifications]
                        [object]
                            id="parry_object"
                        [/object]
                    [/modifications]
                [/filter_wml]
            [/not]
        [/filter]
        [object]
            id=parry_object
            take_only_once=no
            silent=yes
            [filter]
                x,y=$x1,$y1
            [/filter]
            [effect]
                apply_to=new_ability
                [abilities]
                    [chance_to_hit]
                        id=parry_effect
                        add="(self.wml_vars.parry * 1000)"
                    [/chance_to_hit]
                [/abilities]
            [/effect]
        [/object]
    [/event]
    [event]
        name=attacker hits
        first_time_only=no
        [filter_attack]
            special_id=armor_breaking
        [/filter_attack]
        [filter_second]
            [not] #TODO in case of need shift this list
                trait="undead"
            [/not]
        [/filter_second]
        [object]
            id=broken_armor_object
            take_only_once=no
            silent=yes
            duration=turn
            [filter]
                x,y=$x2,$y2
            [/filter]
            [effect]
                apply_to=new_ability
                [abilities]
                    {ABILITY_BROKEN_ARMOR}
                [/abilities]
            [/effect]
        [/object]
    [/event]
    [event]
        name=defender hits
        first_time_only=no
        [filter_second_attack]
            special_id=armor_breaking
        [/filter_second_attack]
        [filter]
            [not] #TODO in case of need shift this list
                trait="undead"
            [/not]
        [/filter]
        [object]
            id=broken_armor_object
            take_only_once=no
            silent=yes
            duration=turn
            [filter]
                x,y=$x1,$y1
            [/filter]
            [effect]
                apply_to=new_ability
                [abilities]
                    {ABILITY_BROKEN_ARMOR}
                [/abilities]
            [/effect]
        [/object]
    [/event]
    [event]
        name=attacker misses
        first_time_only=no
        [filter_second_attack]
            special_id=parry
        [/filter_second_attack]
        [lua]
               code=<<
local u_table = wml.variables["second_unit"]
local variables = wml.get_child(u_table, "variables")
variables.parry = 1
wesnoth.units.erase(u_table.x,u_table.y)
wesnoth.units.to_map(u_table)
>>
        [/lua]
    [/event]
    [event]
        name=attacker hits
        first_time_only=no
        [filter_attack]
            special_id=parry
        [/filter_attack]
        [lua]
               code=<<
local u_table = wml.variables["unit"]
local variables = wml.get_child(u_table, "variables")
variables.parry = 0
wesnoth.units.erase(u_table.x,u_table.y)
wesnoth.units.to_map(u_table)
>>
        [/lua]
    [/event]
    [event]
        name=defender misses
        first_time_only=no
        [filter_attack]
            special_id=parry
        [/filter_attack]
        [lua]
               code=<<
local u_table = wml.variables["unit"]
local variables = wml.get_child(u_table, "variables")
variables.parry = 1
wesnoth.units.erase(u_table.x,u_table.y)
wesnoth.units.to_map(u_table)
>>
        [/lua]
    [/event]
    [event]
        name=defender hits
        first_time_only=no
        [filter_second_attack]
            special_id=parry
        [/filter_second_attack]
        [lua]
               code=<<
local u_table = wml.variables["second_unit"]
local variables = wml.get_child(u_table, "variables")
variables.parry = 0
wesnoth.units.erase(u_table.x,u_table.y)
wesnoth.units.to_map(u_table)
>>
        [/lua]
    [/event]
    [event]
        name=attack end
        first_time_only=no
        [filter_condition]
            {CANCELLED_ATTACK_FILTER}
        [/filter_condition]
        [filter_attack]
            special_id=parry
        [/filter_attack]
        [lua]
               code=<<
local u_table = wml.variables["unit"]
local variables = wml.get_child(u_table, "variables")
variables.parry = 0
wesnoth.units.erase(u_table.x,u_table.y)
wesnoth.units.to_map(u_table)
>>
        [/lua]
    [/event]
    [event]
        name=attack end
        first_time_only=no
        [filter_condition]
            {CANCELLED_ATTACK_FILTER}
        [/filter_condition]
        [filter_second_attack]
            special_id=parry
        [/filter_second_attack]
        [lua]
               code=<<
local u_table = wml.variables["second_unit"]
local variables = wml.get_child(u_table, "variables")
variables.parry = 0
wesnoth.units.erase(u_table.x,u_table.y)
wesnoth.units.to_map(u_table)
>>
        [/lua]
    [/event]
    [event]
        name=attack end
        first_time_only=no
        id=knockback_event
        [filter_condition]
            {CANCELLED_ATTACK_FILTER}
        [/filter_condition]
        [filter_attack]
            special=knockback
        [/filter_attack]
        [filter_second]
            [not]
                [filter_location]
                    terrain=*^V*
                [/filter_location]
            [/not]
        [/filter_second]
        [if]
            [variable]
                name=second_unit.hitpoints
                greater_than=0
            [/variable]
            [and]
                [variable]
                    name=unit.hitpoints
                    greater_than=0
                [/variable]
            [/and]
            [then]
                [store_locations]
                    [not]
                        [filter]
                        [/filter]
                    [/not]
                    #terrain=!,Q*,Q*^*,*^Q*,Mv,X*,X*^*,*^X*,_*^*,*^_*
                    [filter_adjacent_location]
                        x,y=$x2,$y2
                        adjacent="$(relative_dir(loc($x2,$y2), loc($x1,$y1)))"
                    [/filter_adjacent_location]
                    variable=knockback_target_hex
                [/store_locations]
                [store_locations]
                    [not]
                        [filter]
                        [/filter]
                    [/not]
                    #terrain=!,Q*,Q*^*,*^Q*,Mv,X*,X*^*,*^X*,_*^*,*^_*
                    [not]
                        [filter_adjacent_location]
                            x,y=$x2,$y2
                            adjacent="$(relative_dir(loc($x2,$y2), loc($x1,$y1)))"
                        [/filter_adjacent_location]
                    [/not]
                    [not]
                        [filter_adjacent_location]
                            x,y=$x1,$y1
                        [/filter_adjacent_location]
                    [/not]
                    [filter_adjacent_location]
                        x,y=$x2,$y2
                    [/filter_adjacent_location]
                    mode=append
                    variable=knockback_target_hex
                [/store_locations]
                [lua]
                    code=<<
local u = wesnoth.units.get(wml.variables["second_unit.id"])
local t = wml.variables["knockback_target_hex[0].terrain"]
if t then
    local move_cost = wesnoth.units.movement_on(u, t)
    if(move_cost > wml.variables["second_unit.max_moves"]) then
        wml.variables["knockback_target_hex"] = nil
    end
end
>>
                [/lua]
                [if]
                    [variable]
                        name=knockback_target_hex.length
                        greater_than=0
                    [/variable]
                    [then]
                        {MOVE_UNIT (x,y=$x2,$y2) $knockback_target_hex.x $knockback_target_hex.y}
                        [if]
                            [have_unit]
                                x,y=$knockback_target_hex.x,$knockback_target_hex.y
                            [/have_unit]
                            [then]
                                [sound]
                                    name=fist.ogg
                                [/sound]
                                [store_unit]
                                    [filter]
                                        x,y=$knockback_target_hex.x,$knockback_target_hex.y
                                    [/filter]
                                    kill=yes
                                    variable=knockbacked
                                [/store_unit]
                                [unstore_unit]
                                    variable=knockbacked
                                    text= _ "knockback"
                                    {COLOR_HARM}
                                    advance=true
                                [/unstore_unit]
                                {CLEAR_VARIABLE knockbacked}
                            [/then]
                        [/if]
                    [/then]
                [/if]
                {CLEAR_VARIABLE knockback_target_hex}
            [/then]
        [/if]
    [/event]
    [event]
        name=exit hex
        id=exploitation_event
        first_time_only = no
        [filter]
            [filter_adjacent]
                [has_attack]
                    special_id = exploitation
                [/has_attack]
                is_enemy = yes
            [/filter_adjacent]
        [/filter]
        [store_unit]
            [filter]
                id=$unit.id
            [/filter]
            variable = defender
        [/store_unit]
        [store_unit]
            [filter]
                [has_attack]
                    special_id = exploitation
                [/has_attack]
                [filter_adjacent]
                    x,y=$x1,$y1
                    is_enemy = yes
                [/filter_adjacent]
                [not]
                    [filter_location]
                        [filter_adjacent_location]
                            x,y=$x2,$y2
                        [/filter_adjacent_location]
                    [/filter_location]
                [/not]
            [/filter]
            variable = exploitation_units
        [/store_unit]
        [foreach]
            array=exploitation_units
            variable=current_exploitation_unit
            [do]
                [lua]
                    code=<<
local attacker= wesnoth.units.get(wml.variables["current_exploitation_unit[0].id"])
local defender= wesnoth.units.get(wml.variables["defender[0].id"])
local attacking_weapon_index = 0
local i = 0
while wml.variables["current_exploitation_unit[0].attack["..i.."]"] ~= nil do
    local weapon = wml.find_child(wml.variables["current_exploitation_unit[0].attack["..i.."]"],"specials",{{"dummy",{id="exploitation"}}})
    if weapon ~= nil then
        attacking_weapon_index = i + 1
        break
    end
    i = i + 1
end
defender.attacks[(#defender.attacks + 1)] = {}
local _, _, attacker_stats, defender_stats =wesnoth.simulate_combat(attacker,attacking_weapon_index, defender, #defender.attacks)
defender.attacks[#defender.attacks] = nil
for key, value in pairs(attacker_stats) do
    wml.variables["attacker_stats."..key] = tonumber(value) or tostring(value)
end
for key, value in pairs(defender_stats) do
    wml.variables["defender_stats."..key] = tonumber(value) or tostring(value)
end>>
                [/lua]
                [set_variable]
                    name = hit_roll
                    rand = 1..100
                [/set_variable]
                [if]
                    [variable]
                        name = attacker_stats.chance_to_hit
                        greater_than = $hit_roll
                    [/variable]
                    [then]
#                          [lua]
#                              code=<<
#  local v=wml.variables
#  local animation = wesnoth.units.create_animator()
#  local attacker= wesnoth.units.get(v["current_exploitation_unit[0].id"])
#  local defender= wesnoth.units.get(v["defender[0].id"])
#  local facing = {x = defender.x, y = defender.y}
#  local unit = attacker
#  local facing_loc = wesnoth.map.find(facing)[1]
#  local dir = wesnoth.map.get_relative_dir(unit.x, unit.y, facing_loc[1], facing_loc[2])
#  unit.facing = dir
#  facing = wesnoth.map.get_direction(unit.x, unit.y, dir)
#  animation:add(attacker, "attack", "hit",{with_bars = true, primary = attacker.attacks[v["attacker_stats.name"]], secondary = attacker.attacks[v["attacker_stats.name"]], target = facing})
#  defender.hitpoints=(defender.hitpoints - v["attacker_stats.damage"])
#  if defender.hitpoints <= 0 then
#      animation:add(defender, "die", "hit",{with_bars = true, primary = defender.attacks[v["defender_stats.name"]], secondary = defender.attacks[v["defender_stats.name"]],text = v["attacker_stats.damage"],color={255,0,0}})
#  else
#      animation:add(defender, "defend", "hit",{with_bars = true, primary = defender.attacks[v["defender_stats.name"]], secondary = defender.attacks[v["defender_stats.name"]], text = v["attacker_stats.damage"],color={255,0,0}})
#  end
#  animation:run()
#  animation:clear()
#  >>
#                          [/lua]
                        [harm_unit]#TODO doesn't look good
                            [filter]
                                x,y=$x1,$y1
                            [/filter]
                            [filter_second]
                                id=$current_exploitation_unit.id
                            [/filter_second]
                            amount = $attacker_stats.damage
                            kill = yes
                            experience = kill
                            fire_event = yes
                            animate = yes
                            [primary_attack]
                                special_id = exploitation
                            [/primary_attack]
                        [/harm_unit]
                    [/then]
                    [else]
                        [lua]
                            code=<<
local v=wml.variables
local animation = wesnoth.units.create_animator()
local attacker= wesnoth.units.get(v["current_exploitation_unit[0].id"])
local defender= wesnoth.units.get(v["defender[0].id"])
local facing = {x = defender.x, y = defender.y}
local unit = attacker
local facing_loc = wesnoth.map.find(facing)[1]
local dir = wesnoth.map.get_relative_dir(unit.x, unit.y, facing_loc[1], facing_loc[2])
unit.facing = dir
facing = wesnoth.map.get_direction(unit.x, unit.y, dir)
animation:add(attacker, "attack", "miss",{with_bars = true, primary = attacker.attacks[v["attacker_stats.name"]], secondary = attacker.attacks[v["attacker_stats.name"]], target = facing})
animation:add(defender, "defend", "miss",{with_bars = true, primary = defender.attacks[v["defender_stats.name"]], secondary = defender.attacks[v["defender_stats.name"]]})
animation:run()
animation:clear()
                            >>
                        [/lua]
                    [/else]
                [/if]
            [/do]
        [/foreach]
        #  {CLEAR_VARIABLE exploitation_units,defender,attacker_stats,defender_stats,hit_roll}
    [/event]
    [event]
        name=attacker_hits
        first_time_only=no
        [filter_attack]
            special_id=zoc_stun, all_round
        [/filter_attack]
        [filter_condition]
        [/filter_condition]
        [modify_unit]
            [filter]
                [filter_adjacent]
                    x,y=$x1,$y1
                    is_enemy=yes
                [/filter_adjacent]
                [not]
                    status=stunned
                [/not]
            [/filter]
            [object]
                silent=yes
                duration=turn end
                [effect]
                    apply_to=image_mod
                    replace="CS(50,50,0)"
                [/effect]
                [effect]
                    apply_to=zoc
                    value=no
                [/effect]
                [effect]
                    apply_to=movement
                    increase=-50%
                [/effect]
                [effect]
                    apply_to=status
                    add=stunned
                [/effect]
            [/object]
        [/modify_unit]
    [/event]
    [event]
        name=side turn end
        first_time_only=no
        [modify_unit]
            [filter]
                side=$side_number
                status=stunned
            [/filter]
            [status]
                stunned=no
            [/status]
        [/modify_unit]
    [/event]
#enddef

#define SPEAKING TAGS MESSAGE
    [narration]
        {TAGS}
        message = {MESSAGE}
    [/narration]
#enddef

#define NARRATION TAGS MESSAGE
    [narration]
        {TAGS}
        speaker_unit = no
        message = {MESSAGE}
    [/narration]
#enddef

#define DELAY TIME ACCELERATE
    [delay]
        time={TIME}
        accelerate={ACCELERATE}
    [/delay]
#enddef

#define AMLA_LEVEL_INCREASE
#doesnt work
    [event]
        name=post_advance
        id=amla_level_increase_event
        first_time_only=no
#         [filter_condition]
#             {AWW_TEST_WAS_AMLA}
#         [/filter_condition]
#cant find
        [modify_unit]
            [filter]
                x,y=$x1,$y1
            [/filter]
            [object] ###############################################MAYBE DOESN'T work becouse of ID, which shouldn't be there
                id=amla_level_increase
                duration=forever
                silent=yes
                [effect]
                    apply_to=level
                    increase=1
                [/effect]
            [/object]
#             [set_variable]
#                 name=aww_level_count
#                 value=$unit.level
#             [/set_variable]
#TODO number of AMLAS past, then move into AMLA
        [/modify_unit]
    [/event]
#enddef

##############Scenario 1 MACROS####################

#define BUILD_CAMP UNIT X Y
    {MOVE_UNIT {UNIT} {X} {Y}}
    [terrain]
        x,y={X},{Y}
        terrain=^Cyk
        layer=overlay
    [/terrain]
    [redraw]
        side=1
    [/redraw]
    [sound]
        name=mace-miss.ogg
    [/sound]
    [delay]
        time=500
        accelerate=yes
    [/delay]
#enddef
#define BUILD_CAMP_KEEP UNIT X Y
    {MOVE_UNIT {UNIT} {X} {Y}}
    [terrain]
        x,y={X},{Y}
        terrain=^Kyt
        layer=overlay
    [/terrain]
    [redraw]
        side=1
    [/redraw]
    [sound]
        name=mace-miss.ogg
    [/sound]
    [delay]
        time=500
        accelerate=yes
    [/delay]
#enddef
#define BUILD_TENT_VILLAGE UNIT X Y
    {MOVE_UNIT {UNIT} {X} {Y}}
    [terrain]
        x,y={X},{Y}
        terrain=^Vct
        layer=overlay
    [/terrain]
    [redraw]
        side=1
    [/redraw]
    [sound]
        name=mace-miss.ogg
    [/sound]
    [delay]
        time=500
        accelerate=yes
    [/delay]
#enddef
#define BUILD_TORCH_UP UNIT X Y TIME_X TIME_Y
    {MOVE_UNIT {UNIT} {X} {Y}}
    {PLACE_TORCHES "{X}" "$({Y}-1)"}
    [sound]
        name=torch.ogg
    [/sound]
    [delay]
        time=500
        accelerate=yes
    [/delay]
#enddef
#define PLACE_TORCHES X Y
    {VARIABLE torch.x {X}}
    {VARIABLE torch.y {Y}}
    {VARIABLE torch_array ""}
    [lua]
        code=<<
local i = 0
if tostring(wml.variables["torch.x"]):find(",") then
    for num in wml.variables["torch.x"]:gmatch("[^,%s]+") do
        wml.variables["torch_array["..i.."].x"] = tonumber(num)
        i = i + 1
    end
else
    wml.variables["torch_array[0].x"] = tonumber(wml.variables["torch.x"])
end
        >>
    [/lua]
    [lua]
        code=<<
local i = 0
if tostring(wml.variables["torch.y"]):find(",") then
    for num in wml.variables["torch.y"]:gmatch("[^,%s]+") do
        wml.variables["torch_array["..i.."].y"] = tonumber(num)
        i = i + 1
    end
else
    wml.variables["torch_array[0].y"] = tonumber(wml.variables["torch.y"])
end
        >>
    [/lua]
    [foreach]
        array=torch_array
        [do]
            [if]
                [have_location]
                    x,y=$torch_array[$i].x,$torch_array[$i].y
                    terrain=X*^*
                    include_borders=yes
                [/have_location]
                [then]
                    [time_area]
                        id="torch_$torch_array[$i].x|_$torch_array[$i].y"
                        x,y=$torch_array[$i].x,$torch_array[$i].y
                        include_borders=yes
                        [or]
                            [filter_adjacent_location]
                                x,y=$torch_array[$i].x,$torch_array[$i].y
                                adjacent=ne,n,nw
                                include_borders=yes
                            [/filter_adjacent_location]
                            [not]
                                terrain=X*^*
                            [/not]
                        [/or]
                        [time]
                            name= _ "Torchlight"
                            image=time/schedule-indoors-dark.png
                            red=0
                            green=-20
                            blue=-35
                        [/time]
                    [/time_area]
                [/then]
                [else]
                    [time_area]
                        id="torch_$torch_array[$i].x|_$torch_array[$i].y"
                        x,y=$torch_array[$i].x,$torch_array[$i].y
                        include_borders=yes
                        [or]
                            [filter_adjacent_location]
                                x,y=$torch_array[$i].x,$torch_array[$i].y
                                adjacent=se,s,sw
                                include_borders=yes
                            [/filter_adjacent_location]
                            [not]
                                terrain=X*^*
                            [/not]
                        [/or]
                        [time]
                            name= _ "Torchlight"
                            image=time/schedule-indoors-dark.png
                            red=0
                            green=-20
                            blue=-35
                        [/time]
                    [/time_area]
                [/else]
            [/if]
            [terrain]
                x,y=$torch_array[$i].x,$torch_array[$i].y
                terrain=^Efs
                layer=overlay
                include_borders=yes
            [/terrain]
            [redraw]
                side=1
            [/redraw]
        [/do]
    [/foreach]
    {CLEAR_VARIABLE torch_array}
    {CLEAR_VARIABLE torch}
#enddef
#define RANDOM_AROUND_PLACEMENT X Y
    [store_locations]
        [filter_adjacent_location]
            x,y={X},{Y}
        [/filter_adjacent_location]
        [not]
            [filter]
            [/filter]
            [filter_location]
                terrain=X*^*
            [/filter_location]
        [/not]
        variable=adjecent_hexes
    [/store_locations]
    {VARIABLE_OP i rand "0..$($adjecent_hexes.length - 1)"}
#enddef
#define VILLAGE_RAID X Y ID
    [event]
        id={ID}
        name=moveto
        first_time_only=yes
        [filter]
            side=1
            x,y={X},{Y}
        [/filter]
        [scroll_to]
            x,y={X},{Y}
        [/scroll_to]
        [terrain]
            x,y={X},{Y}
            terrain=Gd^Vhr
        [/terrain]
        [sound]
            name=torch.ogg
        [/sound]
        [redraw]
            side=1
        [/redraw]
        [delay]
            time=500
            accelerate=yes
        [/delay]
        {VARIABLE {ID} 1}
        {VARIABLE_OP farmers rand "1..100"}
        {VARIABLE_OP type_of_farmer rand "1..100"}
        {VARIABLE_OP units_experience rand "0..{ON_DIFFICULTY 11 13 15}"}
        {RANDOM_AROUND_PLACEMENT {X} {Y} }
        [if]
            [variable]
                name=type_of_farmer
                less_than_equal_to=50
            [/variable]
            [then]
                [move_unit_fake]
                    type=Peasant
                    x={X},$adjecent_hexes[$i].x
                    y={Y},$adjecent_hexes[$i].y
                    side=2
                [/move_unit_fake]
                [unit]
                    type="Peasant"
                    side=2
                    x,y=$adjecent_hexes[$i].x, $adjecent_hexes[$i].y
                    experience=$units_experience
                    placement=map
                    passable=yes
                [/unit]
            [/then]
            [else]
                [move_unit_fake]
                    type=Woodsman
                    x={X},$adjecent_hexes[$i].x
                    y={Y},$adjecent_hexes[$i].y
                    side=2
                [/move_unit_fake]
                [unit]
                    type="Woodsman"
                    side=2
                    x,y=$adjecent_hexes[$i].x, $adjecent_hexes[$i].y
                    experience=$units_experience
                    placement=map
                    passable=yes
                [/unit]
            [/else]
        [/if]
        [if]
            [variable]
                name=farmers
                less_than_equal_to={ON_DIFFICULTY 30 50 70}
            [/variable]
            [then]
                {VARIABLE_OP type_of_farmer rand "1..100"}
                {VARIABLE_OP units_experience rand "0..{ON_DIFFICULTY 11 13 15}"}
                {RANDOM_AROUND_PLACEMENT {X} {Y} }
                [if]
                    [variable]
                        name=type_of_farmer
                        less_than_equal_to=50
                    [/variable]
                    [then]
                        [move_unit_fake]
                            type=Peasant
                            x={X},$adjecent_hexes[$i].x
                            y={Y},$adjecent_hexes[$i].y
                            side=2
                        [/move_unit_fake]
                        [unit]
                            type="Peasant"
                            side=2
                            x,y=$adjecent_hexes[$i].x, $adjecent_hexes[$i].y
                            experience=$units_experience
                            placement=map
                            passable=yes
                        [/unit]
                    [/then]
                    [else]
                        [move_unit_fake]
                            type=Woodsman
                            x={X},$adjecent_hexes[$i].x
                            y={Y},$adjecent_hexes[$i].y
                            side=2
                        [/move_unit_fake]
                        [unit]
                            type="Woodsman"
                            side=2
                            x,y=$adjecent_hexes[$i].x, $adjecent_hexes[$i].y
                            experience=$units_experience
                            placement=map
                            passable=yes
                        [/unit]
                    [/else]
                [/if]
                [if]
                    [variable]
                        name=farmers
                        less_than_equal_to={ON_DIFFICULTY 0 10 20}
                    [/variable]
                    [then]
                        {VARIABLE_OP type_of_farmer rand "1..100"}
                        {VARIABLE_OP units_experience rand "0..{ON_DIFFICULTY 9 10 11}"}
                        {RANDOM_AROUND_PLACEMENT {X} {Y} }
                        [if]
                            [variable]
                                name=type_of_farmer
                                less_than_equal_to=50
                            [/variable]
                            [then]
                                [move_unit_fake]
                                    type=Peasant
                                    x={X},$adjecent_hexes[$i].x
                                    y={Y},$adjecent_hexes[$i].y
                                    side=2
                                [/move_unit_fake]
                                [unit]
                                    type="Peasant"
                                    side=2
                                    x,y=$adjecent_hexes[$i].x, $adjecent_hexes[$i].y
                                    experience=$units_experience
                                    placement=map
                                    passable=yes
                                [/unit]
                            [/then]
                            [else]
                                [move_unit_fake]
                                    type=Ruffian
                                    x={X},$adjecent_hexes[$i].x
                                    y={Y},$adjecent_hexes[$i].y
                                    side=2
                                [/move_unit_fake]
                                [unit]
                                    type="Ruffian"
                                    side=2
                                    x,y=$adjecent_hexes[$i].x, $adjecent_hexes[$i].y
                                    experience=$units_experience
                                    placement=map
                                    passable=yes
                                [/unit]
                            [/else]
                        [/if]
                    [/then]
                [/if]
            [/then]
        [/if]
    [/event]
#enddef
#define VILLAGERS_FLEEING X Y ID
    [if]
        [variable]
            name={ID}
            greater_than=0
        [/variable]
        [then]
        [/then]
        [else]
            {VARIABLE_OP type_of_farmer rand "1..100"}
            {VARIABLE_OP units_experience rand "0..{ON_DIFFICULTY 9 10 11}"}
            [if]
                [variable]
                    name=type_of_farmer
                    less_than_equal_to=50
                [/variable]
                [then]
                    [unit]
                        type="Peasant"
                        side=2
                        x,y={X},{Y}
                        animate=yes
                        placement=map
                        passable=yes
                        experience=$units_experience
                        role=villager_fleeing
                    [/unit]
                [/then]
                [else]
                    [unit]
                        type="Woodsman"
                        side=2
                        x,y={X},{Y}
                        animate=yes
                        placement=map
                        passable=yes
                        experience=$units_experience
                        role=villager_fleeing
                    [/unit]
                [/else]
            [/if]
            [capture_village]
                x,y={X},{Y}
            [/capture_village]
            [if]
                [variable]
                    name=villager_talked
                    less_than_equal_to=0
                [/variable]
                [then]
                    [store_unit]
                        [filter]
                            role=villager_fleeing
                        [/filter]
                    [/store_unit]
                    {SPEAKING (id=$unit.id) "Sir Rillon was defeated, it's not safe in there anymore!"}
                    [set_variable]
                        name=villager_talked
                        value=1
                    [/set_variable]
                [/then]
            [/if]
        [/else]
    [/if]
#enddef
#define VILLAGE_REPLACE X Y ID
    [if]
        [variable]
            name={ID}
            greater_than=0
        [/variable]
        [then]
            [terrain]
                x,y={X},{Y}
                terrain=Gd^Vhr
            [/terrain]
        [/then]
    [/if]
#enddef
#define UNIVERSAL_RECALL SIDE X Y RECALL_UNIT NEW_UNIT MAX_XP
    [if]
        [have_unit]
            x,y=recall,recall
            side={SIDE}
            type={RECALL_UNIT}
            search_recall_list=yes
        [/have_unit]
        [then]
            [recall]
                side={SIDE}
                type={RECALL_UNIT}
                x,y={X},{Y}
            [/recall]
        [/then]
        [else]
            {VARIABLE_OP units_experience rand "0..{MAX_XP}"}
            [unit]
                type={NEW_UNIT}
                side={SIDE}
                animate=yes
                x,y={X},{Y}
                experience=$units_experience
            [/unit]
        [/else]
    [/if]
#enddef
#define THREE_TRAITS_LOYAL_UNIT SIDE UNIT_TYPE X Y
    [unit]
        side={SIDE}
        type={UNIT_TYPE}
        x={X}
        y={Y}
        generate_name=yes
        random_traits=yes
        random_gender=yes
        role=needs_loyal_trait
    [/unit]
    [modify_unit]
        [filter]
            role=needs_loyal_trait
        [/filter]
        role=
        {TRAIT_LOYAL}
    [/modify_unit]
#enddef
#define ABILITY_EQUIPPED
    [dummy]
        id=equipped
        name= _ "equipped"
        female_name= _ "female^equipped"
        description=_ "This unit has equipped item and it can't get another one."
        special_note=_ "This unit has equipped item and it can't get another one."
    [/dummy]
#enddef
#define ABILITY_LIVING_SHIELD
    [dummy]
        id=living_shield
        name= _ "living shield"
        female_name= _ "female^living shield"
        description= _ "Driven by a mix of fanatical loyalty and primal fear, this unit instinctively throws itself in harm's way. When an enemy attacks an allied unit adjacent to this one, this expendable warrior will intercept the blow, taking the full brunt of the assault upon its own flesh."
        special_note=_ "This unit can intercept attacks meant for adjacent allies. When an enemy attacks an allied unit adjacent to this one, this unit will take the attack instead."
    [/dummy]
#enddef
#define ABILITY_REANIMATED
    [reanimated]
        id=reanimated
        name= _ "reanimated"
        female_name= _ "female^reanimated"
        description= _ "A nightmarish fusion of past and present, this corpse writhes with unnatural vitality. Fragments of its former self claw their way through decaying flesh, manifesting as twisted echoes of abilities long dead. Those who face it must contend not just with the monster before them, but with the grotesque remnants of the person it once was."
        special_note=_ "Twisted echoes of past life writhe within this rotting flesh, granting unpredictable and horrifying abilities."
    [/reanimated]
#enddef
#define ABILITY_FORAGE
    [regenerate]
        id=forage
        name=_"forage"
        female_name= _ "female^forage"
        description=_"#TODO"
        special_note=_ "When on forest/fungus/farm/village tile, this unit heals 4 HP per turn."
        affect_self=yes
        value=4
        poison=slowed
        [filter_self]
            [filter_location]
                #forest, fungus, farm
                terrain=*^F*,*^Uf,*^Ufi,*^Gvs,*^Tf
            [/filter_location]
        [/filter_self]
    [/regenerate]
#enddef
#define ABILITY_RINGING_EARS
    [chance_to_hit]
        id=ringing_ears
        sub=10
    [/chance_to_hit]
#enddef
#define ABILITY_INKED
    [chance_to_hit]
        id=inked
        name= _ "inked"
        female_name= _ "female^inked"
        description=_ "This unit's accuracy is decreased by 10% until the end of the fight."
        special_note=_ "YOU REALLY SHOULDN'T SEE THIS! (unless special note's appearance has been changed)"
        sub=10
    [/chance_to_hit]
#enddef
#define ABILITY_TENACITY
    [resistance]
        id=tenacity
        divide=2
        max_value=0
        [filter_base_value]
            greater_than=-100
            less_than=0
        [/filter_base_value]
        name= _ "tenacity"
        female_name= _ "female^tenacity"
        description=_ "#TODO"
        special_note=_ "This unit's vulnerabilities are halved when defending."
        affect_self=yes
        active_on=defence
    [/resistance]
#enddef
#define ABILITY_BOLD
    [resistance]
        id=bold
        divide=2
        max_value=0
        [filter_base_value]
            greater_than=-100
            less_than=0
        [/filter_base_value]
        name= _ "bold"
        female_name= _ "female^bold"
        description=_ "#TODO"
        special_note=_ "This unit's vulnerabilities are halved when attacking."
        affect_self=yes
        active_on=offense
    [/resistance]
#enddef
#define ABILITY_CASTLE_GUARD
    [resistance]
        id=castle_guard
        name= _ "castle guard"
        female_name= _ "female^castle guard"
        description= _ "#TODO"
        special_note= _ "While in a castle, this unit gives 10% physical protection increase to adjacent units in castle, up to the total of 50% protection."
        add=10
        max_value=50
        apply_to=blade,pierce,impact
        affect_self=no
        affect_allies=yes
        cumulative=yes
        [affect_adjacent]
            adjacent=n,ne,se,s,sw,nw
            [filter]
                [filter_location]
                    terrain=C*,K*
                [/filter_location]
            [/filter]
        [/affect_adjacent]
        [filter_base_value]
            less_than=50
        [/filter_base_value]
        [filter]
            [filter_location]
                terrain=C*,K*
            [/filter_location]
        [/filter]
    [/resistance]
#enddef
#define ABILITY_SKILLED
    [chance_to_hit]
        id=skilled
        name= _ "skilled"
        female_name= _ "female^skilled"
        description=_"#TODO"
        special_note= _ "This unit always has a minimum 50% chance to hit"
        value=50
        cumulative=yes
    [/chance_to_hit]
#enddef
#define ABILITY_VERY_SKILLED
    [chance_to_hit]
        id=very_skilled
        name= _ "very skilled"
        female_name= _ "female^very skilled"
        description=_"#TODO"
        special_note= _ "This unit always has a minimum 60% chance to hit"
        value=60
        cumulative=yes
    [/chance_to_hit]
#enddef
#define BATTLE_FRENZY COUNT ADDITION
    [damage]
        id=battle_frenzy_{COUNT}
        add="({ADDITION} * level)"
        cumulative=no
        apply_to=self
        [filter_self]
            [filter_adjacent]
                is_enemy=yes
                count={COUNT}
            [/filter_adjacent]
        [/filter_self]
    [/damage]
#enddef
#define ABILITY_BATTLE_FRENZY
    [damage]
        id=battle_frenzy
        name= _ "battle frenzy"
        female_name= _ "female^battle frenzy"
        description=_ "When in the heat of battle, this unit enters a state of frenzy, significantly increasing its attack power.

+level damage per every adjecent enemy, except first one."
        special_note=_ "This unit deals more damage for every adjecent enemy"
        [filter_self] # So you see something in attack menu
            [filter_adjacent]
                is_enemy=yes
                count=2-6
            [/filter_adjacent]
        [/filter_self]
    [/damage]
    {BATTLE_FRENZY 2 1}
    {BATTLE_FRENZY 3 2}
    {BATTLE_FRENZY 4 3}
    {BATTLE_FRENZY 5 4}
    {BATTLE_FRENZY 6 5}
#enddef

#define ABILITY_BERSERKERS_RAGE
    [damage]
        id=berserkers_rage
        name= _ "berserkers rage"
        female_name= _ "female^berserkers rage"
        description=_ "This unit enters a frenzied state when is about to strike for the last time.

In this state, the unit's damage doubles, unleashing its full berserker rage on its enemies."
        special_note=_ "This unit deals great damage when it's about to die."
        multiply=2
        [filter_self]
            formula="if((self.hitpoints * 4) < self.max_hitpoints, 1, 0)"
        [/filter_self]
    [/damage]
#enddef
#define ABILITY_DAUNTLESS
    [resistance]
        id=dauntless
        name= _ "dauntless"
        female_name= _ "female^dauntless"
        description= _ "When attacking, this unit's unwavering courage and determination bolster its defenses, significantly increasing its resistances."
        special_note=_ "This unit's resistances are doubled, up to a maximum of 50%, when attacking. Vulnerabilities are not affected."
        multiply=2
        max_value=50
        [filter_base_value]
            greater_than=0
            less_than=50
        [/filter_base_value]
        affect_self=yes
        active_on=offense
    [/resistance]
#enddef
#define ABILITY_AWE
    [leadership]
        id=awe
        cumulative=yes
        name=_"awe"
        female_name= _ "female^awe"
        description=_"The menacing presence of this unit strikes fear into the hearts of nearby enemies. Enemies adjacent to this unit deal 15% less damage, with an additional 15% reduction per level difference.
This ability does not affect non-living or fearless units, as they are immune to such intimidation."
        special_note=_ "Enemies adjacent to this unit deal 15% less damage, and another 15% less damage per level difference. Does not affect non-living or fearless units."
        sub="(if(level > other.level, (15 * (level + 1 - other.level)), 15))"
        affect_self=no
        affect_allies=no
        affect_enemies=yes
        [affect_adjacent]
            [filter]
                [not]
                    trait=undead
                    [or]
                        trait=fearless
                    [/or]
                [/not]
            [/filter]
        [/affect_adjacent]
    [/leadership]
#enddef
#define ABILITY_FLEE
    [chance_to_hit]
        id=flee
        name= _ "flee"
        female_name= _ "female^flee"
        description=_ "When faced with imminent defeat, the unit can execute a strategic retreat, swiftly disengaging from combat to avoid certain death.
        
The more space this unit has behind, the more likely it can evade."
        special_note=_ "This unit can flee combat, to fight another day."
        apply_to=opponent
        multiply="(1.0 - if(unit_at(direction_from(loc, other.facing)),0,0.3) - if(unit_at(rotate_loc_around(loc, direction_from(loc, other.facing), 2)),0,0.3))"
        [filter_self] #- if(unit_at(rotate_loc_around(loc, direction_from(loc, other.facing), 1)),0,10) - if(unit_at(rotate_loc_around(loc, direction_from(loc, other.facing), -1)),0,10)
            formula="(wml_vars.flee)"
        [/filter_self]
    [/chance_to_hit]
#enddef
#define ABILITY_DISENGAGE
    [dummy]
        id=disengage
        name= _ "disengage"
        female_name= _ "female^disengage"
        description= _ "Upon invoking the esteemed maneuver, the adept tactician deftly extricates themselves from the tumultuous fray of battle.

This unit can move after attack, if it haven't moved yet."
        special_note=_"If this unit doesn't move before attacking, it will retain its movement points after the attack."
    [/dummy]
#enddef
#define WEAPON_SPECIAL_ARSON
    [damage]
        id=arson_1
        name= _ "arson"
        female_name= _ "female^arson"
        description= _ "#TODO"
        special_note=_ "This unit uses the terrain against the enemy by lighting it on fire, its damage increases by 25% when the enemy is on forest, castle, or a village tile, or other manmade structure (farms and windmills) but decreases by 25% if the enemy is in water. ::Note:: Villages or castles with water or swamp are considered water."
        apply_to=self
        multiply="1.25"
        [filter_opponent]
            [filter_location]
                terrain=C*^*,K*^*,*^F*,*^Gvs,*^Wm,*^Eff,*^Uf*,*^V*,*^Bw*,*^Bh*,*^Bp*
                [not]
                    terrain=W*^*,S*^*,Chw*^*,Chs*^*,Cm*^*,Khw*^*,Khs*^*,Km*^*,*^Vm*,*^Vaa
                [/not]
            [/filter_location]
        [/filter_opponent]
    [/damage]
    [damage]
        id=arson_2
        apply_to=self
        multiply="0.75"
        [filter_opponent]
            [filter_location]
                terrain=W*^*,S*^*,Chw*^*,Chs*^*,Cm*^*,Khw*^*,Khs*^*,Km*^*
                [not]
                    terrain=*^Bw*,*^Bs*,*^Bh*,*^Bc*,*^Bp* # not on Bridges
                [/not]
            [/filter_location]
        [/filter_opponent]
    [/damage]
#enddef
#define ABILITY_AGGRESSIVE
    [attacks]
        id=aggressive
        name= _ "aggressive"
        female_name= _ "female^aggressive"
        description=_ "Lo, when this warrior doth press the attack, a fell madness takes hold. In the frenzy of the charge, both attacker and defender are seized by battle-lust, their blows raining down with terrible fury. Verily, the clashing of arms increaseth by half again its normal measure."
        special_note=_ "When attacking, incites a frenzy in both combatants. All strike counts dealt and received increase by 50%."
        active_on=offense
        apply_to=both
        multiply=1.5
    [/attacks]
#enddef
#define ABILITY_CONCENTRATED
    [attacks] #TODO #NOW
        id=concentrated
        name= _ "concentrated"
        female_name= _ "female^concentrated"
        description= _ "#TODO"
        special_note=_ "#TODO"
        active_on=offense
        apply_to=self
        sub=1
    [/attacks]
    [chance_to_hit]
        id=concentrated_2 #TODO how is it used elsewhere?
        active_on=offense
        apply_to=self
        add="$($weapon.number * 5)"
    [/chance_to_hit]
#enddef
#define ABILITY_LONE_WOLF
    [damage]
        id=lone_wolf
        name= _ "lone wolf"
        female_name= _ "female^lone wolf"
        description=_ "When this unit finds itself isolated, without nearby allies, it undergoes a remarkable transformation.
Enhanced by solitude, its senses sharpen, reflexes quicken, and strength surges."
        special_note=_ "When isolated, the unit's skills peak."
        multiply=1.25
        [filter_self]
            [filter_adjacent]
                is_enemy=no
                count=0
            [/filter_adjacent]
        [/filter_self]
    [/damage]
    [chance_to_hit]
        id=lone_wolf
        add=10
        cumulative=yes
        apply_to=self
        [filter_self]
            [filter_adjacent]
                is_enemy=no
                count=0
            [/filter_adjacent]
        [/filter_self]
    [/chance_to_hit]
#enddef
#define ABILITY_RIGHTEOUS
    [damage]
        id=righteous
        name=_"righteous"
        female_name= _ "female^righteous"
        description= _ "#TODO"
        special_note=_ "This unit deals 25% more damage against chaotic enemies."
        multiply=1.25
        [filter_opponent]
            [filter_wml]
                alignment=chaotic
            [/filter_wml]
        [/filter_opponent]
    [/damage]
#enddef
#define ABILITY_STORMING
    [damage]
        id=storming
        name=_"storming"
        female_name= _ "female^storming"
        description= _ "This unit excels in breaching fortified positions. When attacking enemies occupying a castle or village, this unit gains increased strength, allowing it to deal extra damage and break through defenses more effectively.
The overwhelming force of the storming unit's assault can demoralize and weaken entrenched enemies, making it a powerful asset in capturing strategic locations.

Upon defeating an enemy on castle or village this units takes it's ground."
        special_note=_ "This unit deals extra damage agains fortified foes and recaptures those positions."
        active_on=offense
        multiply=2
        [filter_opponent]
            [filter_location]
                terrain=*^V*,C*^*,K*^*
            [/filter_location]
        [/filter_opponent]
    [/damage]
#enddef
#define ABILITY_WOLF_PACK
    [skirmisher] 
        id=wolf_pack
        name=_"wolf pack"
        female_name= _ "female^wolf pack"
        description=_"#TODO"
        special_note=_ "This unit negates enemy Zones of Control around itself for allied wolf units."
        affect_self=no
        affect_allies=yes
        [affect_adjacent]
            adjacent=n,ne,se,s,sw,nw
            [filter]
                race=wolf
                [or]
                    ability=wolf_pack
                [/or]
            [/filter]
        [/affect_adjacent]
    [/skirmisher]
#enddef
#define ABILITY_PACK_LEADER
    [damage]
        id=pack_leader
        name=_"pack leader"
        female_name= _ "female^pack leader"
        description=_"#TODO"
        special_note=_ "#TODO Adjacent allied wolves deal 50% more backstab-like damage."
        cumulative=no
        affect_self=no
        affect_allies=yes
        [affect_adjacent]
            adjacent=n,ne,se,s,sw,nw
            [filter]
                race=wolf
                [or]
                    ability=wolf_pack
                [/or]
            [/filter]
        [/affect_adjacent]
        multiply=1.5
        active_on=offense
        [filter_opponent]
            formula="
                enemy_of(self, flanker) and not flanker.petrified
            where
                flanker = unit_at(direction_from(loc, other.facing))
            "
        [/filter_opponent]
    [/damage]
#enddef
#define ABILITY_TANGLED_SLAUGHTER
    [damage] #TODO#TODO#TODO
        id=tangled_slaughter
        name=_"tangled slaughter"
        female_name= _ "female^tangled slaughter"
        description=_"#TODO"
        special_note=_ "#TODO"
        cumulative=no
        affect_self=no
        affect_allies=yes
        [affect_adjacent]
            adjacent=n,ne,se,s,sw,nw
            [filter]
                race=wolf
                [or]
                    ability=wolf_pack
                [/or]
            [/filter]
        [/affect_adjacent]
        multiply=1.5
        active_on=offense
        [filter_opponent]
            formula="
                enemy_of(self, flanker) and not flanker.petrified
            where
                flanker = unit_at(direction_from(loc, other.facing))
            "
        [/filter_opponent]
    [/damage]
#enddef
#define ABILITY_DESPERATE_DODGE
    [chance_to_hit]
        id=desperate_dodge
        name= _ "desperate dodge"
        female_name= _ "female^desperate dodge"
        description= _ "The Desperation Dodging effect represents the unit's survival instincts kicking in when nearing a critically injured state. As it takes more damage, its reflexes are heightened by adrenaline, allowing it to twist, duck and dive to narrowly avoid what would otherwise be lethal blows.
The effect ends once the unit evades an attack, simulating how after that harrowing near-miss experience, the surge of desperation fades and the unit's evasion returns to its base chance."
        special_note=_ "This unit's chance to evade grows as it takes damage, resets when evades."
        apply_to=opponent
        sub="(other.wml_vars.desperate_dodge)"
        cumulative=no
    [/chance_to_hit]
#enddef
#define ABILITY_SCAVENGER
    [dummy]
        id=scavenger
        name=_"scavenger"
        female_name= _ "female^scavenger"
        description=_"Scavenger feeds on the remains of its fallen enemies, absorbing their vitality to heal itself. When the unit kills an enemy, it restores health equal to 25% of the enemy's maximum HP, allowing it to sustain itself in the midst of battle.
This gruesome ability ensures scavenger remains a persistent threat on the battlefield."
        special_note= _ "Whenever this unit kills a living enemy, it heals itself by 25% of the enemy's max health."
    [/dummy]
#enddef
#define ABILITY_DRUMBEAT
    [leadership]
        id=drumbeat
        name= _ "drumbeat"
        female_name= _ "female^drumbeat"
        description= _ "#TODO"
        special_note= _ "This unit can offer reassurance to allies, counteracting a time-of-day penalty during daylight hours."
        affect_self=no
        value=25
        cumulative=no
        [affect_adjacent]
            adjacent=n,ne,se,s,sw,nw
            [filter]
                [filter_location]
                    time_of_day=lawful
                [/filter_location]
            [/filter]
        [/affect_adjacent]
    [/leadership]
#enddef
#define ABILITY_ADAPTIVE_ARMOR
    [resistance] #TODO
        id=adaptive_armor
        name= _ "adaptive armor"
        female_name= _ "female^adaptive armor"
        description=_"#TODO"
        special_note= _ "#TODO"
        add=20
        [filter_second_weapon]
            type="$(if($unit.side = $side_number,$unit.variables.crippled,$second_unit.variables.crippled))" #WORKS, in message at least
            #"$(debug_print(10))"               #"$(if($this_unit.side = $unit.side,$second_unit.variables.adaptive_armor,$unit.variables.adaptive_armor))"
        [/filter_second_weapon]
    [/resistance]
#enddef
#define ABILITY_DEATH_SHRIEK
    [dummy]
        id=death_shriek
        name= _ "death shriek"
        female_name= _ "female^death shriek"
        description=_"As this creature perishes, it unleashes a piercing ultrasonic cry. Enemies within 2 tiles are disoriented, suffering 10% reduced accuracy on their next turn. Even in death, the creature's echolocation serves a final purpose."
        special_note= _ "Upon death accuracy of nearby enemies is disrupted temorary."
    [/dummy]
#enddef
#define ABILITY_ENDURANCE
    [dummy]
        id=endurance
        name= _ "endurance"
        female_name= _ "female^endurance"
        description=_"If this unit begins combat with its full measure of life, it cannot be felled in one engagement, always emerging with a flicker of vitality intact."
        special_note= _ "Should a combatant enter the fray with their life force unblemished, the threads of fate shall not be severed in a single clash of arms."
    [/dummy]
#enddef
#define ABILITY_PROTECTION
    [resistance] #TODO only if attacker adjacent to this unit too
        id=protection
        name= _ "protection"
        female_name= _ "female^protection"
        description=_"#TODO"
        special_note= _ "#TODO"
        add=20
        max_value=50
        affect_self=no
        [affect_adjacent]
            adjacent=n,ne,se,s,sw,nw
            [filter]
                formula="(hitpoints/max_hitpoints) < (other.hitpoints/other.max_hitpoints)"
            [/filter]
        [/affect_adjacent]
        [filter_base_value]
            less_than=50
        [/filter_base_value]
        cumulative=yes
    [/resistance]
#enddef
#define WEAPON_SPECIAL_RESISTANT
    [damage]
        id=resistant
        name= _ "resistant"
        female_name= _ "female^resistant"
        description= _ "#TODO"
        special_note= _ "When this attack is used offensively, this unit takes 1 damage less on every strike."
        active_on=offense
        apply_to=opponent
        sub=1
    [/damage]
#enddef
#define WEAPON_SPECIAL_REVENGE
    [chance_to_hit]
        id=revenge
        name= _ "revenge"
        female_name= _ "female^revenge"
        description=_"#TODO"
        special_note= _ "The unit has at least 60% chance to hit during retaliation."
        value=60
        cumulative=yes
        active_on=defense
        apply_to=self
    [/chance_to_hit]
#enddef
#define WEAPON_SPECIAL_INK
    [dummy]
        id=ink
        name=_"ink"
        female_name= _ "female^ink"
        description= _ "#TODO"
        special_note= _ "Ink reduces opponents chance to hit by 10% upon hitting, until the end of the combat."
    [/dummy]
#enddef
#define WEAPON_SPECIAL_RAPIDFIRE
    [chance_to_hit]
        id=rapidfire
        name= _ "rapidfire"
        female_name= _ "female^rapidfire"
        description= _ "The Rapidfire ability allows the wielder to unleash a blistering hail of attacks by rapidly firing or striking with the weapon. However, this drastic rise in attack speed comes at the cost of reduced accuracy and precision.
While Rapidfire is active, each individual attack has a higher chance to miss the intended target as the wielder sacrifices careful aim for sheer volume of fire. Shots go awry more frequently, blows glance off-target, and it becomes much harder to land clean hits."
        special_note= _ "Units attack releases shots in fast succession, which increases strikes by 90%, but cuts accuracy in half."
        sub=20
        active_on=offense
        cumulative=no
    [/chance_to_hit]
    [attacks]
        id=rapidfire
        name= _ ""
        description= ""
        multiply=1.9
        active_on=offense
        cumulative=no
    [/attacks]
#enddef
#define WEAPON_SPECIAL_TEMPO_SURGE
    [attacks]
        id=tempo_surge
        name= _ "tempo surge"
        female_name= _ "female^tempo surge"
        description= _ "In the crucible of combat, time bends to the sword's will. Blades clash in a furious dance, each warrior's strikes multiplied as if caught in a whirlwind of steel. Both attacker and defender find their blows increased by half again, locked in a duel that pushes the very limits of mortal speed and skill."
        special_note= _ "A frenzied exchange of blows pushes both combatants to their limits. Increases strikes by 1.5x for both attacker and defender."
        multiply=1.5
        apply_to=both
        active_on=offense
        cumulative=no
    [/attacks]
#enddef
#define WEAPON_SPECIAL_KNOCKBACK
    [knockback]
        id=knockback
        name= _ "knockback"
        female_name= _ "female^knockback"
        description=_ "#TODO"
        special_note= _"#TODO"
    [/knockback]
#enddef
#define WEAPON_SPECIAL_ARMOR_BREAKING
    [dummy]
        id=armor_breaking
        name=_"armor breaking"
        female_name= _ "female^armor breaking"
        description=_"With a thunderous blow that shakes the very earth, this weapon finds the flaw in foe's defenses. Their vaunted armor is temporarily compromised by 20%, its protective layers rent asunder by the sheer ferocity of attack. For but a fleeting moment, their stalwart guard is grievously weakened, leaving them vulnerable to further onslaught. Strike true while their aegis falters, for soon their battered shield shall regain its potency, denying this opportune breach. Seize chance to exploit their failing guard before the armor's integrity is restored."
        special_note= _ "Attacks of this unit can temporarily break foes armor."
    [/dummy]
#enddef
#define ABILITY_BROKEN_ARMOR
    [resistance]
        id=broken_armor_1
        cumulative=no
        sub=20
        min_value=0
        max_value=100
        apply_to=blade,pierce,impact
        [filter_base_value]
            greater_than=20
            less_than=100
        [/filter_base_value]
        affect_self=yes
        affect_allies=no
        affect_enemies=no
    [/resistance]
    [resistance]
        id=broken_armor_2
        cumulative=no
        value=0
        min_value=0
        max_value=100
        apply_to=blade,pierce,impact
        [filter_base_value]
            greater_than=0
            less_than=21
        [/filter_base_value]
        affect_self=yes
        affect_allies=no
        affect_enemies=no
    [/resistance]
#enddef
#define WEAPON_SPECIAL_ARMOR_PENETRATING
    [dummy]
        id = armor_penetrating
        name = _"armor penetrating"
        female_name= _ "female^armor penetrating"
        description= _ "A well-aimed attack that defies conventional defenses. With lethal precision, blow finds the chinks and weak points in foe's armor. No matter how stalwart their protective layering, a full thirty percent of its shielding value is rendered utterly moot. Such is the penetrating might of this focused assault that it simply punches through, shearing the armored plates asunder as if they were made of parchment."
        special_note= _ "This unit's attack can ignore portion of enemy armor."
    [/dummy]
#enddef
#define ABILITY_ARMOR_PENETRATING
    [resistance]
        id=armor_penetrating_ability_1
        cumulative=no
        sub=30
        min_value=0
        max_value=100
        apply_to=blade,pierce,impact
        [filter_base_value]
            greater_than=30
            less_than=100
        [/filter_base_value]
        affect_self=no
        affect_allies=no
        affect_enemies=yes
        [affect_adjacent]
            adjacent=n,ne,se,s,sw,nw
            [filter]
                [not] #TODO in case of need shift this list
                    trait="undead"
                [/not]
            [/filter]
        [/affect_adjacent]
        [filter_second_weapon]
            special_id_active=armor_penetrating
        [/filter_second_weapon]
    [/resistance]
    [resistance]
        id=armor_penetrating_ability_2
        cumulative=no
        value=0
        min_value=0
        max_value=100
        apply_to=blade,pierce,impact
        [filter_base_value]
            greater_than=0
            less_than=31
        [/filter_base_value]
        affect_self=no
        affect_allies=no
        affect_enemies=yes
        [affect_adjacent]
            adjacent=n,ne,se,s,sw,nw
            [filter]
                [not] #TODO in case of need shift this list
                    trait="undead"
                [/not]
            [/filter]
        [/affect_adjacent]
        [filter_second_weapon]
            special_id_active=armor_penetrating
        [/filter_second_weapon]
    [/resistance]
#enddef
#define WEAPON_SPECIAL_PARRY
    [dummy]
        id = parry
        name = _"parry"
        female_name= _ "female^parry"
        description= _ "When an enemy attack misses, the unit expertly parries the failed strike, creating an opening for a precise counterattack.

This ability ensures that the unit lands a retaliatory hit, turning the foe's failure into an immediate advantage."
        special_note= _ "This unit hits enemy, when it misses it's strike."
    [/dummy]
#enddef
#define WEAPON_SPECIAL_EXPLOITATION
    [dummy]
        id = exploitation
        name = _"exploitation"
        female_name= _ "female^exploitation"
        description= _ "Seizing the perfect moment, the opportunist unleashes a devastating strike on retreating enemies, exploiting their vulnerability, ensuring no escape for the weak and the cowardly

This unit attacks enemies with strike of the weapon, when a foe leaves it's zone of control."
        special_note= _ "This unit can deal extra damage to retreating enemy."
    [/dummy]
#enddef
#define ABILITY_MARK
    [resistance] #TODO#TOD#TODO UPDATE DESCRIPTION
        id=mark
        sub=30
        [filter_self]
            formula="(other.id = self.wml_vars.marked_unit)"
        [/filter_self]
        affect_self=no
        affect_allies=no
        affect_enemies=yes
        [affect_adjacent]
            adjacent=n,ne,se,s,sw,nw
            [filter]
                [not] #TODO in case of need shift this list
                    trait="undead"
                [/not]
            [/filter]
        [/affect_adjacent]
        [filter_second_weapon]
            special_id_active=mark
        [/filter_second_weapon]
    [/resistance]
#enddef
#define ABILITY_CORRODED
    [resistance]
        id=corroded
        name= _ "corroded" #TODO
        female_name=_"female^corrode"
        description= _ "This unit's armor is corroded and can not withstand physical damage as well. This status can be removed in a village."
        special_note= _ "This unit's armor is corroded and can not withstand physical damage as well. This status can be removed in a village."
        sub=10
        max_value=90
        apply_to=blade,pierce,impact
        affect_self=yes
    [/resistance]
#enddef
#define WEAPON_SPECIAL_CORRODE
    [dummy]
        id=corrode
        name= _ "corrode" #TODO
        female_name=_"female^corrode"
        description= _ "This attack can corrode the armor of hit units. Its physical resistance it lowered by 10% until the armor gets repaired in a village."
        special_id= _ "This attack can corrode the armor of hit units. Its physical resistance it lowered by 10% until the armor gets repaired in a village."
    [/dummy]
#enddef
#define WEAPON_SPECIAL_MARK
    [dummy]
        id=mark
        name= _ "mark"
        female_name= _ "female^mark"
        description=_ "After attacking an enemy, this unit learns foes personal weakness allowing further strikes to be critical hits, dealing 50% more damage.
However this unit can mark only one enemy at the time."
        special_note=_ "Attacks of this unit can deal great damage if opponent doesn't change too often."
        [filter_self]
            formula="(other.id = self.wml_vars.marked_unit)"
        [/filter_self]
    [/dummy]
#enddef
#define WEAPON_SPECIAL_EXECUTIONERS_CHOP
    [damage]
        id=executioners_chop
        name= _ "executioner's chop"
        female_name= _ "female^executioner's chop"
        description=_ "With a decisive and brutal swing, the executioner unleashes a devastating blow that can seal the fate of any foe teetering on the edge of oblivion."
        special_note=_ "This unit can deal great damage to criticaly wounded units."
        multiply=2
        apply_to=self
        [filter_opponent]
        [/filter_opponent]
        [filter_self] #TODO, DOESN'T WORK #TODO
            #  formula="if((other.hitpoints * 4) < other.max_hitpoints, 1, 0)"
            formula="(other.hitpoints <= (self.attacks[0].damage * 2))"
        [/filter_self]
    [/damage]
#enddef
#define WEAPON_SPECIAL_BLEED
    [dummy]
        id=bleed
        name= _ "bleed"
        female_name= _ "female^bleed"
        description=_"#TODO"
        special_note=_ "#TODO"
    [/dummy]
#enddef
#define WEAPON_SPECIAL_COUNTER
    [chance_to_hit]
        id=counter
        name= _ "counter"
        female_name= _ "female^counter"
        description= _ "#TODO"
        special_note= _ "When used defensively, this attack always has at least a 60% chance to hit."
        value=60
        cumulative=yes
        active_on=defense
    [/chance_to_hit]
#enddef
#define WEAPON_SPECIAL_CRIPPLING_BLOW
    [dummy] #CURED ONLY IN VILLAGES, HEAL 8 HEALERS AND REGENERATION (20% PER HEALING)
        id=crippling_blow
        name= _ "crippling blow"
        female_name= _ "female^crippling blow"
        description=_ "This weapon makes the enemy unable to fight effectively, decreasing it's damage for 5% until healed." #TODO #TODO
        special_note=_ "This unit can hit so hard, it makes the enemy unable to fight effectively."
    [/dummy]
#enddef
#define WEAPON_SPECIAL_LIMITED_USES ATTACKS_LEFT TRAIT MENU_ITEM
    [dummy]
        id=limited_uses
        name= _ "limited uses {ATTACKS_LEFT}"
        description=_ "This weapon can be used {ATTACKS_LEFT} more times."
        special_note=_ "One of units weapon can be used only {ATTACKS_LEFT} times."
        uses_left={ATTACKS_LEFT}
        trait={TRAIT}
        menu_item={MENU_ITEM}
    [/dummy]
#enddef
#define WEAPON_SPECIAL_ALL_ROUND
    [dummy]
        id=all_round
        name= _ "all round"
        description=_ "This attack damages all surrounding enemies."
        special_note=_ "This unit can damage all surrounding enemies."
    [/dummy]
#enddef
#define WEAPON_SPECIAL_CLUSTER_SHOT
    [dummy]
        id=cluster_shot
        name= _ "cluster shot"
        description=_ "This attack damages all units adjacent to primary target."
        special_note=_ "Attacks of this unit can damage multiple units at once."
    [/dummy]
#enddef
#define WEAPON_SPECIAL_LONG_RANGED RANGE
    [dummy]
        id=long_ranged_{RANGE}
        name= _ "long ranged {RANGE}"
        description=_ "This attack can attack to hexes up to {RANGE} tiles away"
        special_note=_ "Attacks of this unit can damage enemies up to {RANGE} tiles away"
        # set attack_weight and defense_weight to 0 if it's long ranged only
    [/dummy]
#enddef
#define WEAPON_SPECIAL_HIT_AND_RUN
    [dummy]
        id=hit_and_run
        name= _ "hit and run"
        description=_ "Attacker restores movement and gains skirmisher ability for rest of the turn when attacking with this weapon."
        special_note=_ "This unit can attack and then move again."
    [/dummy]
#enddef
#define WEAPON_SPECIAL_CRITICAL
    [damage]
        id=critical
        name= _ "critical"
        female_name=_"female^critical"
        description=_ "Imbued with lethal precision, this weapon harbors a latent power that occasionally manifests in devastating strikes, doubling its destructive force."
        special_note=_ "Weapon(s) of this unit have 10% chance to strike a vital point, inflicting twofold carnage."
        multiply=2
        [filter_self]
            formula="(self.wml_vars.critical = 1)"
        [/filter_self]
    [/damage]
#enddef
#define WEAPON_SPECIAL_BULLSEYE
    [chance_to_hit]
        id=bullseye
        name= _ "bullseye"
        description = _ "When striking offensively, this weapon channels its wielder's focus, piercing through the chaos of battle. Attacks gain unerring accuracy, ensuring at least a 70% chance to hit."
        special_note= _ "Some weapons of the unit have at least a 70% chance to hit when used offensively."
        value=70
        cumulative=yes
        active_on=offense
    [/chance_to_hit]
#enddef
#define WEAPON_SPECIAL_STUN
    [damage]
        id=zoc_stun
        name= _ "stun"
        description= _ "This attack hits so hard that the opponent is dazed and can no longer enforce a zone of control and looses half of movement points. The effect wears off on the opponent’s next turn."
        special_note=_ "This unit is able to stun its enemies, disrupting their zones of control and slowing them down."
        multiply=1
    [/damage]
#enddef
#define WEAPON_SPECIAL_ALWAYS_HITS
    [chance_to_hit]
        id=always_hits
        name= _ "always hits"
        description= _ "This attack is always successful."
        special_note=_ "Some attacks of this unit never misses."
        value=100
        cumulative=no
    [/chance_to_hit]
#enddef
#define WEAPON_SPECIAL_KAMIKAZE
    [dummy]
        id=kamikaze
        name= _ "kamikaze"
        description=_"Unit dies while performing this attack."
        special_note=_"This unit can deliver critical blow, dying in the process."
    [/dummy]
#enddef
#define UNIT_SKIRIMSHER UNIT_FILTER
    [modify_unit]
        [filter]
            {UNIT_FILTER}
        [/filter]
        [object]
            silent=yes
            duration=turn end
            [effect]
                apply_to=new_ability
                [abilities]
                    [skirmisher]
                        id=skirmisher
                        name= _ "skirmisher"
                        female_name= _ "female^skirmisher"
                        description= _ "This unit is skilled in moving past enemies quickly, and ignores all enemy Zones of Control."
                        special_note={INTERNAL:SPECIAL_NOTES_SKIRMISHER}
                        affect_self=yes
                    [/skirmisher]
                [/abilities]
            [/effect]
        [/object]
        moves=$unit.max_moves
    [/modify_unit]
#enddef
#define ABILITY_ALCHEMIST
    [dummy]
        id=alchemist
        name= _ "alchemist"
        female_name= _ "female^alchemist"
        description=_ "This unit can create potions."
        special_note=_ "This unit can create potions."
    [/dummy]
#enddef
#define ABILITY_POTION_OF_HEALING
    [heals]
        value=8
        id=potion_of_healing
        affect_allies=yes
        name= _ "potion_of_healing +8"
        female_name= _ "female^potion_of_healing +8"
        description= _ "heals +8"
        affect_self=no
        poison=slowed
        [affect_adjacent]
        [/affect_adjacent]
    [/heals]
#enddef
#define ABILITY_POTION_OF_LEADING
    [leadership]
        id=potion_of_leading
        value="(25 * (level - other.level))"
        cumulative=no
        name= _ "potion_of_leading"
        female_name= _ "female^potion_of_leading"
        description= _ "This unit can lead other troops in battle.

All adjacent lower-level units from the same side deal 25% more damage for each difference in level."
        affect_self=no
        [affect_adjacent]
            [filter]
                formula="level < other.level"
            [/filter]
        [/affect_adjacent]
    [/leadership]
#enddef
#define IMPLEMENT_ALCHEMIST
    [set_menu_item]
        id=potion_choose
        description= _ "potion selection"
        #[show_if]
            #[true]
            #[/true]
        #[/show_if]
        [filter_location]
            [filter]
                ability=alchemist
            [/filter]
        [/filter_location]
        [command]
            [message]
                speaker=$unit.id
                message= _ "What potion should I make?"
                [option]
                    label= _ "Potion of healing"
                    [command]
                        [modify_unit]
                            [filter]
                                id=$unit.id
                            [/filter]
                            role=going_to_make_potion_of_healing
                        [/modify_unit]
                    [/command]
                [/option]
                [option]
                    label= _ "Potion of leadership"
                    [command]
                        [modify_unit]
                            [filter]
                                id=$unit.id
                            [/filter]
                            role=going_to_make_potion_of_leading
                        [/modify_unit]
                    [/command]
                [/option]
            [/message]
        [/command]
    [/set_menu_item]
    [event]
        name=turn refresh
        first_time_only=no
        [modify_unit]
            [filter]
                #side=$side_number
                #ability=alchemist
            [/filter]
            [effect]
                apply_to=remove_ability
                [abilities]
                    id=potion_of_healing, potion_of_leading
                [/abilities]
            [/effect]
        [/modify_unit]
        [modify_unit]
            [filter]
                side=$side_number
                role=going_to_make_potion_of_healing
            [/filter]
            [effect]
                apply_to=new_ability
                [abilities]
                    {ABILITY_POTION_OF_HEALING}
                [/abilities]
            [/effect]
        [/modify_unit]
        [modify_unit]
            [filter]
                side=$side_number
                role=going_to_make_potion_of_leading
            [/filter]
            [effect]
                apply_to=new_ability
                [abilities]
                    {ABILITY_POTION_OF_LEADING}
                [/abilities]
            [/effect]
        [/modify_unit]
    [/event]
#enddef
#define IMPLEMENT_LOAD_COUNTER
    [event]
        name=new turn
        first_time_only=no
        [get_global_variable]
            namespace=Bandits_from_Brown_Hills.loads.$game_number|.$scenario_number
            from_global=$turn_number
            to_local=is_variable_created
            side=1
        [/get_global_variable]
        [if]
            [variable]
                name=is_variable_created
                equals=""
            [/variable]
            [then]
                [set_global_variable]
                    namespace=Bandits_from_Brown_Hills.loads.$game_number|.$scenario_number
                    from_local=variable_with_zero
                    to_global=$turn_number
                    side=1
                    immediate=yes
                [/set_global_variable]
            [/then]
        [/if]
    [/event]
    [event]
        name=preload
        first_time_only=no
        [get_global_variable]
            namespace=Bandits_from_Brown_Hills.loads.$game_number|.$scenario_number
            from_global=$turn_number
            to_local=is_variable_created
            side=1
        [/get_global_variable]
        [if]
            [variable] ### MEANS IT'S NOT SCENARIO ONE FIRST EVER LOAD
                name=game_number
                not_equals=""
            [/variable]
            [and]
                [variable]
                    name=is_variable_created
                    not_equals=""
                [/variable]
            [/and]
            [then]
                [get_global_variable]
                    namespace=Bandits_from_Brown_Hills.loads.$game_number|.$scenario_number
                    from_global=$turn_number
                    to_local=load_count
                    side=1
                [/get_global_variable]
                [set_variable]
                    name=load_count
                    add=1
                [/set_variable]
                [set_global_variable]
                    namespace=Bandits_from_Brown_Hills.loads.$game_number|.$scenario_number
                    from_local=load_count
                    to_global=$turn_number
                    side=1
                    immediate=yes
                [/set_global_variable]
            [/then]
        [/if]
    [/event]
    [event]
        name=start
        [get_global_variable]
            namespace=Bandits_from_Brown_Hills.loads.$game_number|.$scenario_number
            from_global=$turn_number
            to_local=is_variable_created
            side=1
        [/get_global_variable]
        [if]
            [variable]
                name=is_variable_created
                equals=""
            [/variable]
            [then]
                [set_global_variable]
                    namespace=Bandits_from_Brown_Hills.loads.$game_number|.$scenario_number
                    from_local=variable_with_zero
                    to_global=1
                    side=1
                    immediate=yes
                [/set_global_variable]
            [/then]
        [/if]
    [/event]
#enddef
##define ABILITY_GOING_TO_MAKE_POTION_OF_HEALING
    #[dummy]
        #id=going_to_make_potion_of_healing
        #name=""
        #female_name=""
        #description=""
        #special_note=""
    #[/dummy]
##/enddef
##define ABILITY_GOING_TO_MAKE_POTION_OF_LEADING
    #[dummy]
        #id=going_to_make_potion_of_leading
        #name=""
        #female_name=""
        #description=""
        #special_note=""
    #[/dummy]
##/enddef
##define ABILITY_POTION_OF_LEADING
    #[leadership]
        #id=potion_of_leading
        #value="(25 * (level - other.level))"
        #cumulative=no
        #name= _ "potion_of_leading"
        #female_name= _ "female^potion_of_leading"
        #description= _ "This unit can lead other troops in battle.

#All adjacent lower-level units from the same side deal 25% more damage for each difference in level."
        #affect_self=no
        #[affect_adjacent]
            #[filter]
                #formula="level < other.level"
            #[/filter]
        #[/affect_adjacent]
    #[/leadership]
##/enddef
##define IMPLEMENT_ALCHEMIST
    #[set_menu_item]
        #id=potion_choose
        #description= _ "potion selection"
        ##[show_if]
            ##[true]
            ##[/true]
        ##[/show_if]
        #[filter_location]
            #[filter]
                #ability=alchemist
            #[/filter]
        #[/filter_location]
        #[command]
            #[message]
                #speaker=$unit.id
                #message= _ "What potion should I make?"
                #[option]
                    #label= _ "Potion of healing"
                    #[command]
                        #[modify_unit]
                            #[filter]
                                #id=$unit.id
                            #[/filter]
                            #[effect]
                                #apply_to=remove_ability
                                #[abilities]
                                    #id=going_to_make_potion_of_leading
                                #[/abilities]
                            #[/effect]
                        #[/modify_unit]
                        #[modify_unit]
                            #[filter]
                                #id=$unit.id
                            #[/filter]
                            #[effect]
                                #apply_to=new_ability
                                #[abilities]
                                    #{ABILITY_GOING_TO_MAKE_POTION_OF_HEALING}
                                #[/abilities]
                            #[/effect]
                        #[/modify_unit]
                    #[/command]
                #[/option]
                #[option]
                    #label= _ "Potion of leadership"
                    #[command]
                        #[modify_unit]
                            #[filter]
                                #id=$unit.id
                            #[/filter]
                            #[effect]
                                #apply_to=remove_ability
                                #[abilities]
                                    #id=going_to_make_potion_of_healing
                                #[/abilities]
                            #[/effect]
                        #[/modify_unit]
                        #[modify_unit]
                            #[filter]
                                #id=$unit.id
                            #[/filter]
                            #[effect]
                                #apply_to=new_ability
                                #[abilities]
                                    #{ABILITY_GOING_TO_MAKE_POTION_OF_LEADING}
                                #[/abilities]
                            #[/effect]
                        #[/modify_unit]
                    #[/command]
                #[/option]
            #[/message]
        #[/command]
    #[/set_menu_item]
    #[event]
        #name=turn refresh
        #first_time_only=no
        #[modify_unit]
            #[filter]
                #ability=alchemist
            #[/filter]
            #[effect]
                #apply_to=remove_ability
                #[abilities]
                    #id=potion_of_healing,potion_of_leading
                #[/abilities]
            #[/effect]
        #[/modify_unit]
        #[modify_unit]
            #[filter]
                #ability=going_to_make_potion_of_healing
            #[/filter]
            #[effect]
                #apply_to=new_ability
                #[abilities]
                    #{ABILITY_POTION_OF_HEALING}
                #[/abilities]
            #[/effect]
        #[/modify_unit]
        #[modify_unit]
            #[filter]
                #ability=going_to_make_potion_of_leading
            #[/filter]
            #[effect]
                #apply_to=new_ability
                #[abilities]
                    #{ABILITY_POTION_OF_LEADING}
                #[/abilities]
            #[/effect]
        #[/modify_unit]
    #[/event]
##/enddef

#### FINDS CLOSEST ENEMY

#{VARIABLE max_radius 50}
                #{VARIABLE radius 0}
                #{VARIABLE bombard_targets 0}
                #[while]
                    #[variable]
                        #name=bombard_targets
                        #equals=0
                    #[/variable]
                    #[and]
                        #[variable]
                            #name=radius
                            #less_than_equal_to=$max_radius
                        #[/variable]
                    #[/and]
                    #[do]
                        #[if]
                            #[have_unit]
                                #side=1
                                #[filter_location]
                                    #x=$dwarvish_cannoner[$i].x
                                    #y=$dwarvish_cannoner[$i].y
                                    #radius=$radius
                                #[/filter_location]
                            #[/have_unit]
                            #[then]
                                #[store_unit]
                                    #[filter]
                                        #side=1
                                        #[filter_location]
                                            #x=$dwarvish_cannoner[$i].x
                                            #y=$dwarvish_cannoner[$i].y
                                            #radius=$radius
                                        #[/filter_location]
                                    #[/filter]
                                    #variable=bombard_targets
                                #[/store_unit]
                            #[/then]
                        #[/if]
                        #{VARIABLE_OP radius add 1}
                    #[/do]
                #[/while]
