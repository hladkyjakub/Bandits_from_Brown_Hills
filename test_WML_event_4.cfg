#alias e4=lua wesnoth.require("wml-utils").handle_event_commands(wml.tovconfig(wml.load("~add-ons/Bandits_from_Brown_Hills/test_WML_event_4.cfg")))
#  [object]
#      id=hitpoints_bonus
#      [filter]
#      [/filter]
#      [effect]
#          apply_to=hitpoints
#          increase_total=10
#      [/effect]
#  [/object]
#  [remove_object]
#      object_id=hitpoints_bonus
#      id=jareth
#  [/remove_object]
#  [lua]
#      code=<<
#  -- wesnoth.wml_actions.object({id="hitpoints_bonus",{"effect",{apply_to="hitpoints",increase_total=10}},{"filter",{}}})
#  -- local u=wesnoth.units.find_on_map({})[1]
#  -- cfg=u.__cfg
#  -- wml.find_child(wml.find_child(wml.get_child(cfg,"modifications"),"object",{id="hitpoints_bonus"}),"effect",{apply_to="hitpoints"}).increase_total = 99
#  -- wesnoth.units.to_map(cfg)
#  -- local mu=wesnoth.units.find_on_map({})[1]
#  -- print("current unit should have hitpoints increased: "..wml.find_child(wml.find_child(wml.get_child(mu.__cfg,"modifications"),"object",{id="hitpoints_bonus"}),"effect",{apply_to="hitpoints"}).increase_total)

#  -- CRASHES GAME
#  function wesnoth.effects.weapons_real_range(unit, cfg)
#      unit.hitpoints=50
#      unit_cfg = unit.__cfg
#      -- for i, weapon in ipairs(unit.attacks) do
#      --     if weapon.range == "ranged" then
#      --         weapon_cfg = wml.get_nth_child(unit_cfg, "attack", i)
#      --         weapon_cfg.max_range=cfg.new_max_range
#      --         weapon_cfg.min_range=cfg.new_min_range
#      --     end
#      -- end
#      unit.hitpoints=100
#      wesnoth.wml_actions.unit(unit_cfg)
#      wesnoth.units.erase(unit.x,unit.y)
#      --wesnoth.wml_actions.object({take_only_once=false,id="real_ranged_weapons",{"filter",{type="Dwarvish Fighter",x=10,y=10}},{"effect",{apply_to="weapons_real_range",new_max_range=3,new_min_range=2}}})
#      --wesnoth.units.to_map(unit_cfg)
#  end
#  wesnoth.wml_actions.object({take_only_once=false,id="real_ranged_weapons",{"filter",{}},{"effect",{apply_to="weapons_real_range",new_max_range=3,new_min_range=2}}})
#  >>
#  [/lua]
#  [store_unit]
#      [filter]
#          id=jareth
#      [/filter]
#      variable=u
#  [/store_unit]
#  [set_variables]
#      name=u.modifications[0]
#      mode=insert
#      [value]
#          [object]
#              duration=turn
#              silent=yes
#              id=meow
#              take_only_once=yes
#              [effect]
#                  apply_to=hitpoints
#                  increase_total=100
#              [/effect]
#          [/object]
#      [/value]
#  [/set_variables]
#  [unstore_unit]
#      variable=u
#  [/unstore_unit]
#  [lua]
#      code=<<
#  wesnoth.wml_actions.set_global_variable(
#  {
#  namespace="Bandits_from_Brown_Hills",
#  from_local="save_data",
#  to_global="save_file",
#  side=1,
#  immediate=true,
#  }
#  )
#  >>
#  [/lua]
#  [lua]
#      code=<<
#  local T = wml.tag -- save ourselves some typing
#  local def_wml = wml.load("~add-ons/Bandits_from_Brown_Hills/gui/my_label.cfg")
#  gui.add_widget_definition("label", "mylabel", wml.get_child(def_wml, 'label_definition'))
#  -- local dialog_wml = wml.load("~add-ons/GUI_Tutorial/cfg/definitions.cfg", true, "schema/gui_window.cfg")
#  -- gui.show_dialog(wml.get_child(dialog_wml, 'resolution'),preshow,postshow)
#  >>
#  [/lua]




#  [unstore_unit]
#      variable=undying[0].unit
#      x,y=10,15
#      animate=yes
#  [/unstore_unit]

#  wesnoth.units.add_modification(unit, "object", {
#      id = "temp_invisible",
#      {"effect",{
#          apply_to = "image_mod",
#          replace = "~ADJUST_ALPHA(0)"  -- Set fully transparent
#      }}
#  })
#  [lua]
#      code=<<
#  local unit = wesnoth.units.create{ type = "Skeleton", side = 1,x=10,y=20}
#  local animator = wesnoth.units.create_animator()
#  animator:add(unit,"recruited","hit",{})
#  wesnoth.units.scroll_to(unit,false,false,true)
#  unit:to_map(unit.x,unit.y,false)
#  animator:run()
#  >>
#  [/lua]
[event]
    name=attacker hits
    first_time_only=no
    [lua]
        code=<<
std_print("attacker_hits",wml.variables["damage_inflicted"])
        >>
    [/lua]
[/event]
[event]
    name=attacker hits
    first_time_only=no
    [filter]
    [/filter]
    [filter_second]
    [/filter_second]
    [filter_attack]
    [/filter_attack]
    [filter_second_attack]
    [/filter_second_attack]
    [lua]
        code=<<
std_print("############################################################")
        >>
    [/lua]
[/event]
[event]
    name=attacker misses
    first_time_only=no
    [lua]
        code=<<
std_print("attacker_misses")
        >>
    [/lua]
[/event]
[event]
    name=last breath
    first_time_only=no
    [lua]
        code=<<
std_print("last breath event fired")
        >>
    [/lua]
[/event]
    [event]
        name=attack
        first_time_only=no
        priority=1000
        [lua]
        code=<<
local u = wesnoth.units.get(wesnoth.current.event_context.x1, wesnoth.current.event_context.y1)
if u.variables.attacker_order == nil or u.variables.attacker_order == 0 then
    u.variables.attacker_order = 1
end
        >>
        [/lua]
    [/event]
    [event]
        name=attack
        first_time_only=no
        #[inspect][/inspect]
        [filter]
            [filter_wml]
                [variables]
                    attacker_order=1
                [/variables]
            [/filter_wml]
        [/filter]
        [filter_attack]
            special_id=packstrike
        [/filter_attack]
        [lua]
code=<<
std_print("ATTACK")
local u = wesnoth.units.get(wesnoth.current.event_context.x1, wesnoth.current.event_context.y1)
local e = wesnoth.units.get(wesnoth.current.event_context.x2, wesnoth.current.event_context.y2)
if e.hitpoints <= 0 then
    return
end
local neighbors1 = table.pack(wesnoth.map.get_adjacent_hexes({wesnoth.current.event_context.x1, wesnoth.current.event_context.y1}))
local neighbors2 = table.pack(wesnoth.map.get_adjacent_hexes({wesnoth.current.event_context.x2, wesnoth.current.event_context.y2}))
local attackers_loc = {}
for _, h1 in ipairs(neighbors1) do
    for _, h2 in ipairs(neighbors2) do
        if h1[1] == h2[1] and h1[2] == h2[2] then
            table.insert(attackers_loc, h1)
        end
    end
end
local attackers = {}
for _, loc in ipairs(attackers_loc) do
    if wesnoth.units.get(loc) ~= nil and wesnoth.units.get(loc).side == u.side then
        table.insert(attackers, wesnoth.units.get(loc))
    end
end
local defender=e
for _, attacker in ipairs(attackers) do
    attacker.facing=wesnoth.map.get_relative_dir(attacker.x, attacker.y, defender.x, defender.y)

    local _, _, attacker_stats, defender_stats = wesnoth.simulate_combat(attacker, defender) --to handle nil cases of defending_weapon_index
    local defending_weapon_index = 1
    while defender.attacks[defending_weapon_index] ~= nil do
        if wml.get_child(wesnoth.current.event_context,"second_weapon").name == defender.attacks[defending_weapon_index].name then
            _, _, attacker_stats, defender_stats =wesnoth.simulate_combat(attacker, defender, defending_weapon_index)
            break
        end
        defending_weapon_index= defending_weapon_index + 1
    end --for attacker best weapon against that one that defender already uses for defence

    attacker.variables.attacker_order=2
    attacker.variables.attacking_weapon=attacker_stats.number
    attacker.variables.defenders_weapon=defending_weapon_index
    attacker.variables.strikes_left=attacker_stats.num_blows
    std_print("attacker stats number: "..attacker_stats.number.."    defending_weapon_index: "..defending_weapon_index.."    num_blows: "..attacker_stats.num_blows)
    local w2 = nil
    if defender.attacks[attacker.variables.defenders_weapon] ~= nil then
        w2 = defender.attacks[attacker.variables.defenders_weapon].__cfg
    end
    wesnoth.game_events.fire("attack", attacker.loc, defender.loc, {{"first",attacker.attacks[attacker.variables.attacking_weapon].__cfg},{"second",w2}})
end
    >>
[/lua]
[/event]
[event]
name=attack_end
first_time_only=no
priority=-100
[filter_condition]
    [and]
        [variable]
            name=fire_no_attack_end_event
            equals=no
        [/variable]
    [/and]
[/filter_condition]
[filter]
    [filter_wml]
        [variables]
            attacker_order=1
        [/variables]
    [/filter_wml]
[/filter]
[filter_attack]
            special_id=packstrike
        [/filter_attack]
[lua]
code=<<
std_print("ATTACK END")
local u = wesnoth.units.get(wesnoth.current.event_context.x1, wesnoth.current.event_context.y1)
local e = wesnoth.units.get(wesnoth.current.event_context.x2, wesnoth.current.event_context.y2)

local neighbors1 = table.pack(wesnoth.map.get_adjacent_hexes({wesnoth.current.event_context.x1, wesnoth.current.event_context.y1}))
local neighbors2 = table.pack(wesnoth.map.get_adjacent_hexes({wesnoth.current.event_context.x2, wesnoth.current.event_context.y2}))
local attackers_loc = {}
for _, h1 in ipairs(neighbors1) do
    for _, h2 in ipairs(neighbors2) do
        if h1[1] == h2[1] and h1[2] == h2[2] then
            table.insert(attackers_loc, h1)
        end
    end
end
local attackers = {}
for _, loc in ipairs(attackers_loc) do
    if wesnoth.units.get(loc) ~= nil and wesnoth.units.get(loc).side == u.side then
        table.insert(attackers, wesnoth.units.get(loc))
    end
end
local defender=e
for _, attacker in ipairs(attackers) do
    local w2_num = nil
    if defender.attacks[attacker.variables.defenders_weapon] then
        w2_num=attacker.variables.defenders_weapon
    end
    local _, _, attacker_stats, defender_stats =wesnoth.simulate_combat(attacker,attacker.variables.attacking_weapon, defender,w2_num)--attacker.variables.defenders_weapon -- THIS IF I'd want defensive specials of weapon to apply, but enemy doesn't fight back, so no specials take effect
    local w = attacker.attacks[attacker_stats.name]
    local w2 = nil
    local w2_cfg=nil
    if defender_stats.name ~= nil then
        w2 = defender.attacks[defender_stats.name]
        w2_cfg = w2.__cfg
    end
    wesnoth.game_events.fire("attack_end", attacker.loc, defender.loc, {{"first",w.__cfg},{"second",w2_cfg}})
end
>>
[/lua]
[/event]
[event]
name=attack_end
first_time_only=no
priority=-10000000
[set_variable]
name=fire_no_attack_end_event
value=no
[/set_variable]
[/event]
[event]
        name=attacker hits, attacker misses
        first_time_only=no
        priority=-1000000
        [filter]
            [filter_wml]
                [variables]
                    attacker_order=1
                [/variables]
            [/filter_wml]
        [/filter]
        [filter_attack]
            special_id=packstrike
        [/filter_attack]
[lua]
code=<<
std_print("ATTACKED UNIT")
local u = wesnoth.units.get(wesnoth.current.event_context.x1, wesnoth.current.event_context.y1)
local e = wesnoth.units.get(wesnoth.current.event_context.x2, wesnoth.current.event_context.y2)
if e.hitpoints <= 0 then
    return
end
local animator = wesnoth.units.create_animator()

local neighbors1 = table.pack(wesnoth.map.get_adjacent_hexes({wesnoth.current.event_context.x1, wesnoth.current.event_context.y1}))
local neighbors2 = table.pack(wesnoth.map.get_adjacent_hexes({wesnoth.current.event_context.x2, wesnoth.current.event_context.y2}))
local attackers_loc = {}
for _, h1 in ipairs(neighbors1) do
    for _, h2 in ipairs(neighbors2) do
        if h1[1] == h2[1] and h1[2] == h2[2] then
            table.insert(attackers_loc, h1)
        end
    end
end
local attackers = {}
for _, loc in ipairs(attackers_loc) do
    if wesnoth.units.get(loc) ~= nil and wesnoth.units.get(loc).side == u.side then
        table.insert(attackers, wesnoth.units.get(loc))
    end
end
defender=e
std_print("pack attack for loop")
for _, attacker in ipairs(attackers) do
    if attacker.variables.strikes_left > 0 then
        attacker.variables.strikes_left=attacker.variables.strikes_left-1
        attacker.facing=wesnoth.map.get_relative_dir(attacker.x, attacker.y, defender.x, defender.y)
        defender.facing=wesnoth.map.get_relative_dir(defender.x, defender.y,attacker.x, attacker.y)
        -- defender.attacks[attacker.variables.defenders_weapon] = {movement_used=100000,attacks_used=1}
        local loc = attacker.loc
        local loc2 = defender.loc
        local w2_num = nil
        if defender.attacks[attacker.variables.defenders_weapon] then
            w2_num=attacker.variables.defenders_weapon
        end
        local _, _, attacker_stats, defender_stats =wesnoth.simulate_combat(attacker,attacker.variables.attacking_weapon, defender,w2_num)-- -- THIS IF I'd want defensive specials of weapon to apply, but enemy doesn't fight back, so no specials take effect
        local _ = wesnoth.textdomain "wesnoth-Bandits_from_Brown_Hills"
        local w = attacker.attacks[attacker_stats.name]
        local w2 = nil
        local w2_cfg=nil
        if defender_stats.name ~= nil then
            w2 = defender.attacks[defender_stats.name]
            w2_cfg = w2.__cfg
        end
        std_print("hit/miss?")
        if mathx.random() < (attacker_stats.chance_to_hit/100) then

            local damage_inflicted = math.floor(attacker_stats.damage)

            local drain = 0
            if attacker_stats.drains then
                drain = math.floor(math.min((math.min(damage_inflicted,defender.hitpoints) * attacker_stats.drain_percent / 100) + attacker_stats.drain_constant, math.max(attacker.max_hitpoints - attacker.hitpoints,0)))
            end
            local text = ""
            if drain ~= 0 then
                text = text..drain
            end

            local text2 =  damage_inflicted.."\n"
            local add_tab = false
			local gender = defender.gender
            local statuses = {}

			local function set_status(ability, name, male_string, female_string, sound)
				if not attacker_stats[ability] or defender.status[name] then return end
				if gender == "female" then
					text2 = string.format("%s%s%s", text2, tostring(female_string), "\n")
				else
					text2 = string.format("%s%s%s", text2, tostring(male_string), "\n")
				end

                statuses[#statuses+1]=name
				add_tab = true

				if sound then -- for unhealable, that has no sound
					wesnoth.audio.play(sound)
				end --TODO should I do this???
			end
            if not defender.status.unpoisonable then
				set_status("poisons","poisoned", _"poisoned", _"female^poisoned", "poison.ogg")
			end
			set_status("slows","slowed", _"slowed", _"female^slowed", "slowed.wav")
			set_status("petrifies","petrified", _"petrified", _"female^petrified", "petrified.ogg")
			if add_tab then
				text2 = string.format("%s%s", "     ", text2)
			end

            animator:add(attacker, "attack", "hit",{with_bars = true, primary = w, secondary = w2, text = text,color={0,255,0}})
            animator:add(defender, "defend", "hit",{with_bars = true, primary = w, secondary = w2, text = text2,color={255,0,0}})
            animator:run()
            animator:clear()
            for i=1, #statuses do
                defender.status[statuses[i]] = true
            end
            attacker.hitpoints=(attacker.hitpoints + drain)
            defender.hitpoints=(defender.hitpoints - attacker_stats.damage)
            wesnoth.game_events.fire("attacker_hits", attacker.loc, defender.loc, {{"first",w.__cfg},{"second",w2_cfg},damage_inflicted=damage_inflicted})
            std_print("deal damage")
            -- wesnoth.wml_actions.inspect({})
            if defender.valid == nil or defender.hitpoints <= 0 then
                wesnoth.game_events.fire("attack end", u.loc, loc2, {{"first",wml.get_child(wesnoth.current.event_context,"weapon")},{"second",wml.get_child(wesnoth.current.event_context,"second_weapon")}})
                if defender.valid == nil then
                    std_print("defender doesn't exist PROPPER DEATH EVENTS should be fired already, by some other code")
                    break
                end
                wesnoth.game_events.fire("last breath", loc2, attacker.loc, {{"first",w2_cfg},{"second",w.__cfg}}) --inverted
                animator:add(defender, "death", "hit",{with_bars = false, primary = w2, secondary = w}) --inverted TODO unsure!
                animator:run()
                animator:clear()
                defender_level = defender.level
                defender_id= defender.id
                wesnoth.game_events.fire("die", defender.loc, attacker.loc, {{"first",w2_cfg},{"second",w.__cfg}}) --inverted
                wesnoth.wml_actions.kill({ id = defender_id, animate = false, fire_event = false})
                if defender_level == 0 then
                    attacker.experience = wesnoth.game_config.kill_experience * 0.5
                    attacker:advance(true,true)
                else
                    attacker.experience = attacker.experience +(defender_level * wesnoth.game_config.kill_experience)
                    attacker:advance(true,true)
                end
                std_print("fight should end")
                wml.variables["fire_no_attack_end_event"] = true
                -- "breaks" endurance (not enemies, no problem), defender fights util he gets attacked by the original enemy (it should continue even after it's hit by original enemy probably)
                -- raider doesn't work, ranged retalaition weapon, naga guardian, saurian ...
                -- at end set all combat variables to nil
                -- TODO deosn't work for berserker (not intended, just a warning for future me), untested with plague
                break
            end
        else
            animator:add(attacker, "attack", "miss",{with_bars = true, primary = w, secondary = w2})
            animator:add(defender, "defend", "miss",{with_bars = true, primary = w2, secondary = w}) --inverted TODO unsure!
            animator:run()
            animator:clear()
            wesnoth.game_events.fire("attacker_misses", attacker.loc, defender.loc, {{"first",w.__cfg},{"second",w2_cfg}})

        end
    end
end
    >>
[/lua]
[/event]
[event]
    name=attack_end
    first_time_only=no
    priority=-10000
    [lua]
        code=<<
local u = wesnoth.units.get(wesnoth.current.event_context.x1, wesnoth.current.event_context.y1)
if u then
    u.variables.attacker_order = 0
    u.variables.attacking_weapon=nil
    u.variables.defenders_weapon=nil
    u.variables.strikes_left=nil
end
        >>
    [/lua]
[/event]